NLP Methods in Host-based Intrusion Detection Systems: A Systematic Review and
Future Directions

Zarrin Tasnim Sworna!, Zahra Mousavi2, Muhammad Ali Babar!

Abstract

Host-based Intrusion Detection System (HIDS) is an effective last line of defense for defending against cyber security attacks after
perimeter defenses (e.g., Network-based Intrusion Detection System and Firewall) have failed or been bypassed. HIDS is widely
adopted in the industry as HIDS is ranked among the top two most used security tools by Security Operation Centers (SOC) of
organizations. Although effective and efficient HIDS is highly desirable for industrial organizations, the evolution of increasingly

alert fatigue for SOC staff). Since Natural Language Processing (NLP) methods are better suited for identifying complex attack

N
oS complex attack patterns causes several challenges resulting in performance degradation of HIDS (e.g., high false alert rate creating
N

patterns, an increasing number of HIDS are leveraging the advances in NLP that have shown effective and efficient performance
in precisely detecting low footprint, zero-day attacks and predicting an attacker’s next steps. This active research trend of using
S) NLP in HIDS demands a synthesized and comprehensive body of knowledge of NLP-based HIDS. Thus, we conducted a systematic
Z review of the literature on the end-to-end pipeline of the use of NLP in HIDS development. For the end-to-end NLP-based HIDS
©» development pipeline, we identify, taxonomically categorize and systematically compare the state-of-the-art of NLP methods usage
r— in HIDS, attacks detected by these NLP methods, datasets and evaluation metrics which are used to evaluate the NLP-based HIDS.
We highlight the relevant prevalent practices, considerations, advantages and limitations to support the HIDS developers. We also

aa) outline the future research directions for the NLP-based HIDS development.

Y Keywords:

3 Natural Language Processing, Host-based Intrusion Detection, Cyber Security, Anomaly Detection

—

CN 1. Introduction
>

\O Cyber security attacks increased by 1,885% worldwide in
= 2021 (SonicWall}/2022). The attacks fueled by the profit-making
cyber-crime economy with nation-state targets are severely af-

©} fecting every industry including healthcare, financial services
* and government organizations; costing 4.24 million dollars per
> attack breach on average globally in 2021 2022). To
CN) protect an organization by minimizing cyber attacks and thwart-
CN ing new threats targeting an organization’s IT infrastructure, a
\ Host-based Intrusion Detection System (HIDS) is an effective
; =| last line of defense to detect and prevent malicious activities af-
xX ter perimeter defenses (e.g., Network-based Intrusion Detection
= System (NIDS), Firewall) have failed or been bypassed
fet al.|[2012). The use of HIDS is a prevalent security practice as
HIDS consolidated its position as a preferred defense technique

and ranked among the top 2 most used security tools by orga-

nizations among various commercial tools 2021
2018). HIDS helps organizations to identify malicious

activities by monitoring host data (e.g., system call sequence)
which, if left undetected, can lead to detrimental breaches. Even
if HIDS could identify and prevent 5% of all cyber attacks on

'School of Computer Science, University of Adelaide and Cyber Security
Cooperative Research Centre, Australia.

School of Computer Science, University of Adelaide and CSIRO/Data61,
Australia.

Preprint submitted to Journal of Network and Computer Applications

time worldwide, it could help avoid a loss of around 260 billion

USD 2021). Hence, performance enhancement

of HIDS is an active research area due to the ubiquitous adoption
of HIDS 2018).

Despite all the research and industrial efforts, the evolution
of the increasingly complex attack vectors causes HIDS to suf-
fer from a high false alarm rate. The high false alarm rate of
HIDS significantly contributes to alarm fatigue of the security
team (Geponis and Goranin] (2020), Other key challenges for
the existing HIDS include handling a massive amount of system
call traces, run-time attack detection by continuous monitoring
of host data, keeping good detection rate, handling imbalanced

data and reducing the required processing time and resource
consumption. These challenges hinder large-scale HIDS deploy-

ment in commercial settings (Khreich et al.|/2017).

To mitigate the above-mentioned HIDS challenges due to the
evolution of the increasingly complex attack patterns, traditional
HIDS techniques are becoming obsolete. Hence, researchers
are introducing new Natural Language Processing (NLP)-based
HIDS techniques which are better suited to complex attack pat-
HIDS researchers are motivated to benefit from methods that
have been proven successful in the NLP domain, due to the high
similarity between natural languages and System Call (syscall)

sequences of a host used by HIDS (Bouzar-Benlabiod et al.
2019 2018). Syscalls denote the interface of user

November 22, 2022


space programs for requesting services (e.g., read a file) from the
Operating System’s (OS) kernel. The way humans communicate
with each other through natural language constructed based on
specific grammar and syntax, host processes gain their intentions
with syscall sequences, which are used by processes to communi-
cate with OS in a host (Lv et al-|[2018). For HIDS development,
a comprehensive and detailed source of understanding a host’s
behavior is syscalls executed in that host
(2021). This understanding enables fast detec-

tion of anomalies at run-time by analyzing streams of syscalls

(Ring IV et al.)/2021).

Table 1: Example syscall sequences for reading two files
et al.}|2021)

Seql “open, read, write, open, read, write”
Seq2 “open, open, read, write, read, write”
Seq3 “open, open, read, read, write, write”

Consider a program that opens two files to read at the same
time. When the program is running, the syscalls (e.g., open)
sequences created by threads of the program may vary as shown
in Table[T] If the only sequence in the normal pattern library of
a traditional HIDS is Seq! and if the input sequence of HIDS
for detection is Seq2, a traditional HIDS based on pattern match-
ing may create a false alarm considering Seq2 as abnormal
(Grimmer et al.|[2021). Hence, researchers consider syscall se-
quences of a syscall trace as sentences of a document with each
syscall as a word, where the order, frequency and semantics
of each word contributes to the understanding of host behavior
(Bouzar-Benlabiod et al| 2020} Diep et al.|/2018). Since NLP
has different methods for analyzing the context and semantics
of a word, HIDS researchers are using NLP methods to analyze
the contextual syscall similarity (Vinayakumar et al.||/2019), be-
havioral syscall semantics (Liu et al.||2020b), to preserve the
sequence information of syscall sequence (Vinayakumar et al.|

2019) and to learn correlation of syscalls (Bouzar-Benlabiod
2020).

Researchers are developing NLP-inspired problem formula-
tion for HIDS development such as the use of question-answer
models for generating future syscalls considering previously
invoked syscall sequence as question and generated syscall se-
quence as answer and considering
host intrusion detection as classifying a sentence into normal
or abnormal that is similar to sentiment classification (Diep|
(2018). The latest HIDS research trend is the adoption
of NLP methods considering from simple NLP methods such
as the use of n-gram and Term Frequency-Inverse Document
Frequency (TF-IDF) to extract contextual and statistical features
to advanced NLP methods such as word embedding, semantic
ontology and language modeling for domain adaptation, knowl-
edge fusion and next syscalls prediction. The use of NLP en-
abled the HIDS researchers to develop HIDS with more accurate
intrusion detection capability of unknown attacks in real-time by

processing syscall streams on the fly (Bouzar-Benlabiod et al.
2020}|Creech and Hu}|2013b) and the ability to predict a future

syscall sequence possibly to be executed during an attack
2019).

Despite the drastically growing adoption of NLP in HIDS
development, there has been relatively little effort allocated to
systematically analyze and synthesize the available peer review
literature to understand how NLP is used in HIDS development.
The lack of a synthesized and comprehensive body of knowledge
on such an important topic motivated us to conduct a Systematic
Literature Review (SLR) of the papers on the end-to-end pipeline
of the use of NLP in HIDS development. For the end-to-end
NLP-based HIDS development pipeline, we identify, taxonomi-
cally categorize and systematically compare the state-of-the-art
of NLP methods usage in HIDS, attacks detected by these NLP
methods, datasets and metrics which are used to evaluate the
NLP-based HIDS. As our focus is on the use of NLP, we con-
sider HIDS that use syscall sequence and text data sources (e.g.,
text-based cyber threat intelligence data) as primary data source.

The key contributions of this review are as follows:

e We are the first, to the best of our knowledge, to conduct
a comprehensive and systematic review of the literature
on the end-to-end pipeline of the use of NLP in HIDS
development.

e We propose a taxonomy for consistently classifying the cur-
rent and future research on NLP-based HIDS. We demon-
strate the use of our taxonomy by identifying 6 categories
of NLP methods used in HIDS. For the evaluation of NLP-
based HIDS, we categorize 133 attacks, 20 datasets and 17
evaluation metrics from the reviewed papers.

e We synthesize and discuss the pros and cons of each cate-
gory of the used NLP methods, datasets, evaluation metrics
and other key factors (e.g., classifiers, learning types) to
help HIDS researchers and developers understand their
characteristics.

We highlight open issues with the current HIDS practices
and propose potential research directions in the intersection
of HIDS and NLP research.

Our SLR findings are expected to help in better understanding
the landscape of the existing NLP-based HIDS for both HIDS
researchers and HIDS developers. We recommend researchers
to focus on developing real-time accurate HIDS leveraging ad-
vanced NLP techniques (e.g., text augmentation, NLP-based
low-shot learning), enhancing HIDS model interpretability and
semantic integration of HIDS in a Security Operation Center
(SOC). For developers, our findings are expected to help them
to enhance the existing HIDS or develop new HIDS using NLP
method for supporting the construction and deployment of ef-
fective and efficient HIDS. To support developers in this regard,
we highlight the relevant existing practices, considerations, ad-
vantages and limitations. We recommend that HIDS developers
train and validate the HIDS model using NLP methods with
their industry specific data before the deployment of HIDS as
the most used public datasets that we found are usually outdated
and lack sufficient and diverse attack instances.

The rest of this paper is organized as follows. Section 2]com-
pares our SLR to existing surveys. Section[3]outlines our SLR
methodology. Section [4|presents the overview of our results in


Table 2: Comparative analysis of our SLR with the existing HIDS survey papers

NLP Feature Classifier Attack Evaluation Common
Study Focus ExtractionTech (ML/DL/Rules) Types Datasets Metrics SLR Papers
Ours v v All v (12) Vv Vv (17) v -
Jose et al. 2018) x x no DL x x x x 2
Liu et al.{/2018) % % no DL x 4 Vv (8) x 6
Bridges et al. {/2019) x x no DL Vv (4) Vv x x 5

v represents yes, X represents no, - represents not available

terms of study distribution and our proposed taxonomy. Sections
[5] and |6] present a detailed analysis of the used NLP methods
for HIDS (RQ1) and evaluation of NLP-based HIDS (RQ2).
In Section [7] open challenges with future research directions
are discussed. Section|8] presents the threats to validity of our
findings. Lastly, the paper is concluded in Section]

2. Comparison to the Existing Literature Reviews

Intrusion Detection Systems (IDS) has consolidated its posi-
tion as a must use defense technique with various commercial
IDS to detect attacks within state, personal and industrial Infor-
mation Technology (IT) infrastructures (Zarpelao et al.|[2017).
IDS is a highly active research domain and the existing literature
has been reviewed from diverse aspects due to the significance of
intrusion detection to protect an organization from cyber attacks.
For ensuring the unique and novel contribution of our SLR, we
extensively analyzed the related reviews and compared them
with our SLR in this section.

' Khraisat et al. |

2018} {Aleroud and Karabatis
2017} {Hodo et al.}/2017} [Bansal et al.| [2016
2015 2013 are available in the

literature, which primarily focus on NIDS. NIDS is significantly
different from HIDS as NIDS detects attacks in an organization’s
network, while HIDS detects attacks on an organization’s host
system after NIDS has failed or been bypassed
(2012). While NIDS monitors the network traffic, HIDS monitors
host data (e.g., syscalls). Compared to NIDS, HIDS has the
ability to detect insider attacks and Advanced Persistent Threats
(i.e, APT involves intruders staying in an organization’s system

for years by evading detection mechanisms) 2018).
Due to the significant differences between HIDS and NIDS,
20 2020

2018
2017

(Aleesa et al] 2020
Renjit|[2020)|Gumiisbas et al) 2020] Berman etal
have 0 papers in common with

our HIDS focused SLR.

Four reviews are available which focused on HIDS (Bridges|
(comparative analysis shown in Table[2). These reviews
differ from our SLR in terms of objectives, included papers
and results. None of these existing HIDS reviews focus on
NLP. The semantics and contextual analysis ability of NLP
methods help HIDS to detect unknown and adversarial attacks
with lower False Alarm Rate (FAR) and higher accuracy
on NLP to identify NLP-based methods (e.g., word embedding
and language modeling) and the future research directions.

A decade-old review (Bukac et al.||2012) focused on stan-
dalone HIDS and did not consider hybrid or collaborative HIDS,

while our SLR does not confine the scope to standalone HIDS.
The authors discussed network traffic, process behavior, file
integrity and security of HIDS against tampering without fo-
cusing on any Machine Learning (ML), Deep Learning (DL)
or NLP approaches. Another review aims
at the existing anomaly detection techniques of other domains
and how they can be adopted from other domains to the HIDS
domain, whereas our SLR discusses both misuse and anomaly
detection-based HIDS. This review does not focus on features,
attacks, datasets and evaluation metrics, which are discussed
in our SLR. Another review categorized
the host data sources (e.g., system logs, windows registry) to
discuss the existing literature from data source perspective. This
review does not focus on the application of NLP methods, fea-
ture extraction methods (e.g., manual, automated), DL models
and metrics, whereas our SLR analyses all these HIDS aspects.
This review included the majority of the papers before 2010;
also they prioritized the papers covering the use of host data
sources including NIDS. In contrast, we conduct SLR in the
(2010-2022) time-range as the adoption of NLP techniques in
HIDS research gained momentum in this decade (Creech and|
[Hu}|2013b). The review reported by 2018) focused on
syscall-based HIDS and their application on embedded systems,
in contrast, we exclude (discussed in Section 3.2) the HIDS of
any specific application area (e.g., embedded systems and IoT).

In summary, none of the above-mentioned existing HIDS re-
views focus on NLP application, feature extraction methods and
DL-based approaches, as shown in Table[2| We identified, cate-
gorized and analyzed NLP methods, attacks, datasets and eval-
uation metrics used in NLP-based HIDS. Notably, none of the
existing surveys covered DL-based techniques (e.g., language
modeling, word embedding), while we identified 24 studies in


Table 3: Research questions that are addressed in our SLR

Research Questions

Motivation

RQ1: How have the NLP methods been used over the years by researchers to
develop HIDS?

To identify and categorize the NLP methods and how these NLP methods are
used to develop HIDS. The aim is to provide insights to HIDS developers
and researchers about the existing prevalent practices and considerations in
NLP-based HIDS and how NLP methods are beneficial to improve HIDS
performance for industrial adoption.

RQ2: How do researchers evaluate the NLP-based HIDS?

e RQ2.1: What type of attacks do researchers aim to detect using NLP methods
in HIDS?

e RQ2.2: What are the datasets used to apply NLP methods in HIDS research?

e RQ2.3: Which evaluation metrics are used to evaluate NLP-based HIDS?

To identify what type of attacks can be detected by NLP-based HIDS and what
are the impacts of these attacks

To provide insight to practitioners and researchers on the HIDS datasets that
are used to evaluate NLP-based HIDS including dataset type and availability.
To identify the evaluation metrics that are used to evaluate NLP-based HIDS

the recent years using DL approaches with significantly better
performance for real-life applications handling a huge volume of
data. Considering the included papers, our SLR notably differs
from these existing HIDS reviews having only 2, 6, 5 and 0

papers in common in the studies (Jose et al.] {2018
2018}|Bridges et al.||2019 2012), respectively.

There are several reviews on NLP or text mining applications
in different domains such as financial domain (Kumar and Ravi!
2016), social network (Irfan et al.|/2015), market prediction (Nas-
2014), and a recent one in cyber security domain
. The review in cyber security domain

Ignaczak et al.||2021) presents a broader view by identifying
the tasks (e.g., cyber bullying, forensic analysis and sentiment

analysis) in the cyber security domain which are supported by
text mining, while our study thoroughly analyzes and focuses
on NLP-based HIDS.

3. Research Methodology

We conducted a Systematic Literature Review (SLR) using

the widely adopted SLR guideline (Kitchenham and Charters
2007). SLR is a widely adopted research approach in Evidence-

Based Software Engineering (EBSE)
as SLR evaluates and interprets a research topic utilizing a re-
liable, rigorous and auditable methodology
[Charters] |2007). For guiding our analysis, we aimed to answer

two research questions (RQs) as shown in Table [3}with the cor-
responding motivations. Our review protocol steps are presented

in the following Subsections (3.1} 3.4).

3.1. Search Strategy

We formulated our search strategy to retrieve the maximum
number of relevant studies based on the guideline provided by

(Kitchenham and Charters||2007). The search strategy includes

the following steps.

3.1.1. Search Method

We used the automated database search method (Kitchenham|
2007) to retrieve the relevant studies from digital

search engines and databases. We used the largest academic
literature database Scopus digital library, which indexes over
5,000 publishers worldwide including the relevant sources (e.g.,

Elsevier, Springer) (Croft et al.|[2021). We complemented Sco-
pus with IEEE Xplore and ACM Digital Library, which are the

most frequently used academic digital libraries 2020).

Moreover, we complemented the automatic search by extracting

more relevant studies using snowballing (Wohlin||2014).

3.1.2. Search String

We used the guidelines of
to develop a comprehensive search string. Considering the key
terms “host intrusion detection” and “NLP”’, we created several
pilot search strings composed of synonyms and related terms.
For the first term, we considered its varied representation (e.g.,
Host based intrusion detection, host IDS) along with the terms
related to both anomaly and misuse detection. We excluded the
term ‘HIDS’ as it is also used to represent ‘high-dimensional and
sparse (HiDS)’, which provided irrelevant papers. Regarding
the second term, we noticed the inclusion of ‘NLP’ is not useful
as the papers on HIDS may not specify such a term even though
they use a wide variety of NLP techniques (e.g. n-grams, word
embedding and language modeling). After executing a series
of pilot searches in titles, abstracts and keywords of papers on
databases and checking the inclusion of papers that were known
to us, we designed the following search string.

“host intrusion detection” OR “host based intrusion detection”
OR “host anomaly detection” OR “host based anomaly detec-
tion” OR “host based anomaly intrusion detection” OR “host
based ids” OR “host ids” OR “host based misuse intrusion de-
tection” OR (“signature based intrusion detection” AND “host’”)

3.2. Inclusion and Exclusion Criteria and Quality Assessment
Criteria

Table [4] shows the inclusion and exclusion criteria in line
with our SLR aim and RQs. These are used for selecting the
relevant papers out of the ones retrieved from data sources. We
developed a quality assessment criteria for excluding low quality
papers from our review. We adopted and adjusted our quality
assessment criteria from
(2019). Table[5]presents the Assessment Questions (AQs). We
graded the reviewed papers on each quality assessment criterion
using a three tier (“Yes”=1, “Partially”=0.5 or “No”=0) scale.
The assessment score of a paper is calculated by adding the
scores of the answers to the six AQs. To assure the reliability
of our review’s findings, we only included papers of acceptable
quality, that is, those with an assessment score of more than 3.00
(50% of the perfect score).


Table 4: Inclusion and Exclusion Criteria

Inclusion Criteria

11; Publications that utilize NLP methods to develop host-based intrusion detection system including anomaly and misuse detection approaches.

72: Publications that are presented at a conference or a journal.

I3: Studies that are published within the search timeline of January 2010 and May 2022 with extended coverage by snowballing until July 2022.

Exclusion Criteria

E1;: Papers that investigate IDS in a particular security application infrastructure (e.g., Cloud 2013 2013), IoT (Zarpelao et al.||2017) and

Smart city (Elsaeidy et al.||2019)).

E2: Publications that are not written in English and are not accessible.

E3: Unpublished papers that are uploaded to the archive, workshop papers and the conference version of a journal paper.

= Conference = Journal

Scopus’ IEEE Xplore°

Digital Library

11 11

367 y 164 17
Database Search Duplication Removal
(results=606) (results=455)
Forward & Backward
Snowballing (results=28)

Total Studies
(results=37+28=65)

Title-Abstract based
Selection (results=161)

Full text based Selection
& Quality Assessment
(results=37)

Number of Studies
oN RO wo Ss
| Nn

_! +
aN) wo
7 >
| -

% @ =
El \-

‘7o | = \

Year

a) Primary studies selection process

b) Distribution of selected studies per year across venues

Figure 1: Primary studies selection process and distribution of selected studies.

Table 5: Quality assessment of the papers
ID Quality Assessment Criteria

AQ1 Does the paper clearly state objectives or challenges it targets to
solve in HIDS literature?

AQ2 Is the proposed method well-defined and discussed in detail?

AQ3 __ Is the performance of the proposed method measured and reported
within the paper?

AQ4 _ Is the proposed method compared with other existing approaches?

AQ5 Does the paper provide information regarding the datasets used for
the assessment of the proposed approach?

AQ6___ Does the paper provide details of the varied evaluation metrics used
for evaluation?

3.3. Selection of Primary Studies

Figure[I](a) shows the number of studies retrieved in different
phases of the papers selection process. We performed Database
Search, Duplication Removal, Title-Abstract-based Selection,
Full-text-based Selection and Quality Assessment against the
inclusion and exclusion criteria (Table [4) and quality assess-
ment criteria (Table[5). Further, we used forward and backward
snowballing following the widely adopted snowballing guide-
line by scanning the citations and references of
the selected papers, respectively. Snowballing is used as the
search string may not retrieve obscurely phrased studies, and
the selected digital libraries may not exhaustively include all
peer-reviewed papers (Wohlin] |2014). For snowballing, we fol-
lowed the same selection process including title and abstract, full
text-based selection and quality assessment. In total 65 papers
were selected for our SLR as enlisted in Appendix [10.1] each
with a unique identifier (S#).

3.4. Data Extraction and Synthesis

We organized a Data Extraction Form (DEF) based on 17
data items to answer our RQs as given in our online appendix

(Zarrin Tasnim Sworna and Babar}||2022). Data items (D1-D7)

include context data such as title, author, venue, publication year,
publisher, summary and open challenges, respectively. To facili-
tate the analysis of the extracted RQ relevant data, we grouped
the data items as follows. RQI (D8-D12: NLP method, fea-
ture extraction method, learning type, classifier and HIDS type),
RQ?2.1 (D13-D14: attack detection/classification (i.e., binary or
multi-class classification), attack instances), RQ2.2 (D15-D16:
dataset, dataset availability) and RQ2.3 (D17: evaluation metric).
A pilot study of 15 papers was conducted collaboratively by the
authors to update the DEF for capturing the needed information
in the best possible summarised form. The designed DEF was
completed collaboratively using an online Google Spreadsheet
and any ambiguity was resolved through discussion.

Data Synthesis: We analyzed the context data items (i.e., D1-
D5) using descriptive statistics as shown in Section [4.1] We
analyzed the RQ relevant data items using thematic analysis
considering the guideline of study in-
cluding the following steps. Familiarizing with data by reading
and examining our extracted data. Generating initial codes to
capture NLP methods, attacks, datasets and evaluation metrics
for NLP-based HIDS. Searching for themes and generating
potential themes for each data item by merging the correspond-
ing initial codes based on their similarities. Reviewing themes
and mapping themes were performed iteratively to review all
the codes and themes to revise their allocations if needed. To
finalize the RQs’ answers, the synthesized results for each RQ
were reviewed and any disagreements were discussed by the
authors in daily Slack channel discussions and weekly meetings.

4. Results Overview

We present the distribution of the selected studies in Section
[4.I]and our taxonomy of the literature on NLP-based HIDS in


y=

IN

Attacker =
& Syscall seq

Organization
Host

Benign r
bulge Wee Infrustructure

(RQ2.2) Data Collection Module

Data Acquisition

(RQ2.3)
Evaluation
Module

Detection
Prediction

/

Feature

; Learning
extraction

type

Classifier

Normal

Attack patterns/:

Patterns signature a

Library

Figure 2: The main modules and a general overview of end-to-end pipeline of NLP-based HIDS

N-gram based (24)

Confidentiality - [Word Frequency-based (5)
Integrity] Impact on Security ) RQ2 : RQ1 Word Embedding based (10)
Availability!’ Requirements : Semantic Ontology (3)
Attacks f NLP-based Neural Language Modeling (8)
BOL Se —— y methods for HIDS} | Hybrid (15)
(55) ) | Categories
U2R (53), ( J
ACE (48) Misuse (6)
Brute Force (45) aun arial 7 7 —  HIDSType {Anomaly (59)
~_ Dos (27) IU eane ;
Backdoor (10) Kdoor (10)| Fyne, PP ee Taxonomy of the Supervised (25)
Worn (6) atasets literature on NLP- ‘Learning Type | \Unsupervised (4)
Trojan (5)| Public (56) based HIDS a Sem supervised (33)
Data Theft (4)| Private (7)! | availability
‘Probe (3)| Both (1)|_ J :
Virus (3) Key Factors Automated (55)
isc valuation Metrics Feature _{Manval (5)
Extraction Semi-automated (5)

Detection Performance (51)

Computation Performance (15) -—atrisisn Detection

Performance of Intermediary

Task of Syscall Seq Prediction(3) ( ee
__ Intermediary task _

( Performance of ©

Performance of

-—

ML:Single (38)
"... I ML:Ensemble (7)
Classifiers | —1|Rule-based (17)
| DL: RNN Variants(16)
DL:CNN Variants (12)

Figure 3: Our taxonomy of the literature on NLP-based HIDS with the relevant study counts

Section

4.1. Studies Distribution

Demographic information of papers (e.g., types) is considered
helpful for novice researchers (2017). Figure[]]
(b) presents the consistently upward trend of papers number
in NLP-based HIDS in this decade due to the ever growing
threat landscape. More than half of the total papers (42/65) and
81.82% of the journal papers (27/33) were published between
2018 to 2022 indicating the rapidly growing research literature
and maturity in adopting NLP in HIDS.

The reviewed papers were primarily published in the follow-
ing research areas: Cyber Security, Network Communications,
Data Science and AI and also Software Engineering. The di-
versity of research areas in terms of the publication shows the
interest of researchers with different research backgrounds in
HIDS research.

4.2. Our Taxonomy of the Literature on NLP-based HIDS

Figure[2|shows the main modules and a general overview of
an end-to-end pipeline of NLP-based HIDS. A HIDS typically
monitors the events occurring in an organization’s host infras-
tructure. First, the data collection module monitors and collects
data (e.g., syscall traces), which capture valuable information

about the running applications in a host system. Researchers
consider syscall traces as documents, syscall sequences as sen-
tences in the document and syscalls as words, which enables
researchers to adopt NLP methods for HIDS in the intrusion
detection module. In the intrusion detection module, the input
syscall sequence data are processed and discriminative features
are extracted using NLP methods from the data, which represent
the normal or attack behavior of the input data. The automated
NLP-based feature extraction methods help to generate reliable
features, which accurately represent the behavior of a host sys-
tem’s activities. The generated features are usually applied to
diverse classifiers (e.g., DL-based prediction models). These
classifiers perform the attack detection. The evaluation module
evaluates the attack detection performance of the intrusion detec-
tion module. Lastly, the attack alert generation module generates
attack alerts based on the attack detection outcomes and shares
them with the security experts of SOC in an organization.

Our SLR aims to cover the end-to-end pipeline of NLP-based
HIDS and thoroughly discusses each of its modules. We propose
a taxonomy of NLP-based HIDS by analyzing and synthesizing
the extracted data from the reviewed papers. We provide a
graphical representation of the NLP-based HIDS taxonomy in
Figure[3]

In RQI, we identify and categorize the NLP methods (e.g.,


Table 6: Number of papers in NLP method categories used in HIDS which are published in each year from 2011 to 2022

Category ll 12) 1300«14~—C (15) 1617s 18 19 20S 2S 22 ~Ss Total
Word frequency-based - - 2 2 - - - - - 1 - 5
N-gram-based 1 3 1 2 4 1 4 3 2 3 - - 24
Word embedding-based - - - - - 1 1 3 3 - 8
Neural language modeling 2 3 1 2 - 8
Semantic ontology - 1 - 2 - - - 3
Hybrid 1 - - - - 1 3 4 + 2 2 17
Total 2 4 3 4 + 1 5 11 10 It 8 2 65

word embedding, semantic ontology) used in HIDS. We also fo-
cus on and categorize each key factors that are considered in the
intrusion detection module. The key factors that are adopted to
investigate the host data for intrusions include HIDS type (e.g.,
misuse, anomaly), learning types (e.g., supervised, unsuper-
vised), feature extraction techniques (e.g., manual, automated)
and classifiers (e.g., ML, DL). RQ1 including the categorizations
of NLP methods and all the key factors is discussed in detail in
Section[5]

In RQ2, we analyze how the NLP-based HIDS are evaluated
in terms of detected attacks (in RQ2.1); used datasets (in RQ2.2)
and used evaluation metrics (in RQ2.3). In RQ2.1, we categorize
the attacks (e.g., Brute Force, Backdoor) that can be detected by
leveraging NLP-based HIDS for which alerts are generated in
the attack alert generation module. We also focus on the impacts
(e.g., confidentiality, integrity) of these attacks on the security
requirements. The attacks and impacts are discussed in detail
in Section[6.1] In RQ2.2, we identify and analyze the datasets
that are used in the data collection module for applying NLP
methods to develop and evaluate HIDS. We also focus on the
data types (i.e., real, simulated) and their availability (i.e., pri-
vate, public). Section[6.2|details the datasets that are used in the
reviewed studies to evaluate NLP-based HIDS. Lastly, in RQ2.3,
we identify and categorize the metrics (e.g., FAR, Detection
Rates (DR)) used for the evaluation of HIDS in the reviewed lit-
erature. Detailed comparative analysis of the evaluation metrics
is presented in Section|6.3]

We reflect on the prevalent practices based on findings to our
RQs as shown in the taxonomy of Figure[3| To help researchers
and developers to identify and select their choices, a comprehen-
sive comparative analysis in terms of strengths and weaknesses
for the categories of this proposed taxonomy are highlighted in
Tables 7, 8, 10, 11 and 12. For conciseness, we added the study
mapping with the corresponding categorization of the RQs in
our online appendix 2022).
For the frequently used acronyms in this article, THE
Appendix[10.2|presents their abbreviations.

5. RQ1: Use of NLP Methods in HIDS

Firstly, we categorize and discuss different NLP methods
that researchers use in HIDS, and how the use of these NLP
methods in HIDS trend is evolving over the years in Section
To highlight the effectiveness of the NLP methods for
HIDS, we only cover the NLP methods proposed by the reviewed
studies and disregard the baseline approaches (i.e., methods
used to compare the effectiveness of the proposed method). For

the development of HIDS using different NLP methods, HIDS
developers need to consider a number of other factors (e.g.,
learning type and classifier). Hence, these key factors that are
considered for developing HIDS using NLP are summarized in

Section[5.2]

5.1. Categorization of NLP Methods Used in HIDS

We present a comprehensive and novel categorization of NLP
methods used in HIDS. Table[6]demonstrates the distribution of
the identified categories of NLP methods used in HIDS over the
years. Table [6] suggests that the prevalent NLP methods used
in HIDS over the last 4 years are word embedding, language
modeling and hybrid (i.e., combine multiple NLP methods).
The increasing amount of large scale security data and evolving
complex attack patterns have contributed to this trend of using
these NLP methods that are evolved over deep learning mod-
els due to their prominent HIDS performance. Table [7] shows
the categories along with their advantages, disadvantages and
mapped studies. The categories of used NLP methods in HIDS
are discussed below.

5.1.1. Word frequency-based

In NLP, the word frequency-based method considers how fre-
quently a word (i.e., one syscall) occurs within a document to
indicate the significance of a specific word within the overall
document, which is a lightweight method. As the normal be-
havior of the host varies over time, dynamic update of normal
behavior is critically challenging [S31]. Hence, a lightweight
method like the word frequency-based method is required to
dynamically update normal behavior and extract the features
in HIDS with less computation cost. Researchers investigated
the use of word frequencies considering number of syscalls
(n)=1. Word frequencies are adopted by using three commonly
used approaches in NLP, which are Term Frequency, Inverse
Document Frequency and Bag-of-Words. Though these word
frequency-based methods are computationally lightweight, they
are less detailed as they do not hold sequence information, which
makes it challenging to gain good detection rate and FAR [S9,
$31].

Term Frequency (TF): TF is the calculation of how fre-
quently a term occurs within a document. As each syscall is
presented by a unique word, consequently, the syscall sequences
become sentences and syscall traces holding the syscall sequence
denote documents. To enforce stronger separability between nor-
mal and abnormal syscalls, researchers used TF in One-Class
Support Vector Machine (OC-SVM) [S29] and Clustering with


Table 7: Categories of NLP methods in HIDS along with their strengths, weaknesses and mapped studies

Weaknesses

Study Ref

NLP Method _ Strengths
Word freq- | ¢ Less computational and memory overhead
based e Lightweight and easy to dynamically update normal host system behavior

profile

e Do not consider the order of syscalls
e Difficult to gain a good detection
rate and FAR compared to n-gram

$28, $29, S31, $32, S55

N-gram-based

e Holds order of syscalls to some extent

e Enables early attack detection by splitting the process trace of a host
system into smaller sequences

e Achieves good detection and FAR than word freq-based method

e Reduces the possibility of mimicry attacks on HIDS [S59]

e Incur high computational and mem-
ory overheads

e Requires longer training time com-
pared to Word freq-based method

$2, S11, S16, S17, S19,
$23, S24, $25, $27, S30,
$34, $38, S39, S41, S42,
S49, $52, S53, S56, S58,
S59, S60, S61, S65

Word e Word embedding learns hidden semantic relations of syscalls.
embedding- e Word embedding gives dense vector representation compared to One-hot
based encoding that requires sparse and high dimensional vectors.

e Word embedding has better generalization ability than n-gram-based
methods [S57].

e Can help in domain adaptation through transfer learning to mitigate the
requirement of huge domain-specific data [S12]

e Word embedding requires complex
DL-based training

e Requires more computation cost
compared to n-gram or TF-based
methods

S4, $12, $14, S20, S46,
S47, S51, S57

Semantic on-
tology

e Enables attack knowledge fusion from heterogenous textual data sources
(e.g., security bulletin) through a common semantic schema

e Link and infer means and consequences of cyber threats and vulnerabili-
ties whose signatures are not yet available

e Provide HIDS semantic expressiveness and knowledge description

e Expert knowledge is required to
identify the data sources and define
the detection rules.

e Manual creation and update of de-
tection rules are required.

$13, $26, S33

e Modeling the system behavior re-
quires a huge amount of data

$5, S15, S21, S22, $43,
S44, S50, S63,

Neural lang e Predicts a future syscall sequence possibly to be executed during an
model attack.
e Combining the known invoked syscall traces with predicted future syscall
sequences helps to improve the intrusion detection performance
e Modeling syscalls helps to capture interword relationships.
Hybrid e Makes HIDS more reliable and resilient against evasion and adversarial

attacks by combining decisions from heterogeneous detectors
e Gains the advantages of multiple features or models to lower FAR

e Requires high computation overhead
compared to single methods.

S1, S3,S6, S7, $8, S9,
$10, S18, S35, $36, S37,
S40, S45, S48, $54, S62,

S64

Markov Network (CMN) [S32] classifiers. To reduce the dimen-
sion of TF vectors into a lower dimensional space, researchers
successfully used principal component analysis (PCA) [S28]
that reduced the computational cost.

Inverse Document Frequency (IDF): In NLP, IDF calcu-
lates if a word is common or rare in a given document corpus.
IDF is calculated by the logarithm of the quotient that is obtained
by the division of total document count and count of documents
that contain the word. A study [S31] focused on the frequencies
of the syscalls involved in a trace to generate three feature vec-
tors (i.e., TE, IDF, standard deviation of IDS) and applied them
to K-Nearest-Neighbours (KNN). Though the diverse syscall
frequency-based classifier gained an acceptable performance for
a few types of attack, it can not completely realize the complex
behavior of a modern host system, consequently, require more
intelligent HIDS.

Bag-of-Words (BoW): Another commonly used word
frequency-based technique is BoW, which represents text by
describing words’ occurrence within a document. BoW discards
words’ order or structure related information in a document.
BoW represents if words are present in a document, not the
words’ location in the document, and does not focus on the
contextual relation of words in the document. To better iden-
tify multiple attack types, BoW is used for characterizing the
syscall-based HIDS data to be used in Deep Belief Networks
(DBN)-Softmax DL method for achieving high accuracy [S55].

5.1.2. N-gram-based

N-gram is one of the most used traditional NLP methods for
representing sentences that holds the context information [S5].
While sentences are sequence of words, syscall sequence is a
sequence of syscalls. Due to the similarity of the representation
of sentences and syscall sequence, n-gram is highly used in
HIDS, where n-gram refers to a sequence of n (n>1) syscalls
extracted from a syscall trace [S41]. N-gram method extracts
sequence of syscall of length ‘n’ from a syscall trace by sliding
a window one syscall at once. For instance, a syscall trace with
syscalls “open, getrlimit, mmap, close” [S39], two sequences
“open, getrlimit, mmap” and “getrlimit, mmap, close” of length
3 (n=3) can be extracted. As n-gram holds the order of syscalls,
n-gram has the ability to preserve sequence information of the
syscall to provide good detection accuracy and it reduces the
possibility of mimicry attacks on the HIDS [S59]. Besides,
a HIDS should intervene early to stop the exploited process
instead of waiting for the exploit to complete. To enable early
attack detection, n-gram is used to split the syscall trace of a
process into smaller sequences which can be analyzed instead
of waiting for the process to complete. Due to these advantages,
n-gram, frequency of n-grams, bag-of-n-grams and lookahead
pairs methods from this n-gram category are used to develop
HIDS.

N-gram: A set of studies [S16, S23, S24, $52] have used
n-gram to extract sequence from benign syscall traces and com-
pare them with sequences of a HIDS input trace. Then, any
new sequence in the HIDS input trace is detected as anomalous.
These studies adopted different similarity measures commonly


used in NLP to measure similarity among the sequences such as
Hamming distance [S23, S24], Sequence Covering for Intrusion
Detection (SC4ID) [S16], Levenshtein’s distance (LEV) [S16],
Longest Common Subsequence (LCSq) [S16], Longest Com-
mon Substring (LCSt) [S16] and improved edit distance [S52].
These n-gram-based methods, which use similarity measures
are highly dependent on the similarity threshold for anomaly
detection. Identifying the suitable threshold requires domain
expertise and can be error-prone. To mitigate dependence on
threshold values and to handle large scale syscall-based raw
input data, in recent studies, n-gram is used in advanced DL
models (e.g., Long Short Term Memory (LSTM) [S11]), Con-
volutional Neural Network (CNN) [S17] and Variational Auto
Encoder (VAE) [S38]). For example, a study [S11] used n-gram
(i.e., as syscall sequences are of variable length) to detect known
and unknown attacks. This study [S11] modeled the normal be-
havior of the host system by syscall using LSTM architecture to
detect zero-day (Zoppi and Ceccarelli| unknown attacks.
Then, to predict the most probable ‘n’ syscalls during the at-
tack detected by the LSTM, the Multiple Hidden Markov Model
(Multi-HMM) is adopted. Here each Hidden Markov Model
(HMM) is used to model a distinct known attack for predicting
the probable ‘n’ syscalls during the corresponding attack.
N-gram frequency: Although n-gram preserves the syscall
traces’ sequential information, the representation vectors are
long. Hence, with an increasing value of n, the detection model
requires more storage space and processing time [S2]. To miti-
gate this issue, a few studies [S19, S34, S65] used only the most
frequent n-grams to reduce the feature space at the expense of
the loss of some relevant information, which is a common NLP
method. Though extracting syscall frequency is fast, syscall
count in the trace is not sufficiently informative for detecting
anomalies as syscalls’ count can be similar in normal and abnor-
mal syscall traces. To mitigate this issue, the n-gram frequency
(i.e., phrase count) of NLP is used by a set of studies [S2, S25,
$30, S41, S53, S59, S60] for obtaining a better detection rate
with faster processing. In this method, distinct syscall sequences
of varying lengths are counted. For example, to adopt n-gram
frequency, a study [S41] extracted n-grams of syscalls by sliding
a window of ‘n’ syscalls over the syscall trace, associated a
feature vector for each n-gram, and calculated each n-gram’s
occurrence frequency for diverse traces. These varied-length
n-grams are represented as fixed-size vectors and their cumula-
tive occurrence frequency is assigned as weight. As this method
holds temporal order of syscall in a trace, the application of
OC-SVM trained on n-gram frequency showed better detection
accuracy than the HIDS methods using TF and TF-IDF.
Bag-of-n-grams: The ability to preserve the relative order of
syscalls makes the bag of n-grams a better alternative to the Bag-
of-Word (BoW) NLP method in the context of syscall-based
HIDS. BoW only considers the occurrence frequency of a word
in a document to determine how much the document is relevant
to specific words. In the context of syscall data, considering
syscall as a word and syscall trace as a document, the BoW
model can not preserve the relative order of syscalls. For exam-
ple, the feature vector using BoW of syscall traces “S1: open,
getrlimit, mmap, close” and “S2: open, mmap, getrlimit, close”

are similar. However, to model process behavior, the relative
order of syscalls is highly significant. Loss of information of
syscall sequence may leave a host vulnerable to the mimicry
attack [S42], where an attacker interleaves malware syscall trace
patterns with benign syscall traces. Thus, bag-of-n-grams con-
sider multiple consecutive syscalls as one term, which helps hold
the sequence information and prevent mimicry attacks. A study
[S42] showed that bag-of-n-grams help more accurately distin-
guish process behavior through syscalls for intrusion detection
in HIDS.

Lookahead pairs: Another variation of the n-gram NLP
method is lookahead pairs. In the lookahead pairs method, for a
given syscall sequence and a window of size (n), this window is
slid over the syscall sequence. Then, except for the first syscall
of the window, each syscall of the window is paired with the
first syscall of that window. For example, for a syscall sequence
“S1: open, read, close, exit”. For n=3, starting at the first syscall
“open” the window now has 3 elements “open, read, close”. Next,
the pairing process pairs as follows: “open, read”, “open, close”.
Then, sliding the window next syscall (i.e., read) and the pairing
process pairs as follows “read, close” and “read, exit”. Hence,
the lookahead pair method presents a model of constant space
complexity for syscall-based HIDS. A study [S56] showed that
lookahead pairs modeled with their occurrence frequency are
good discriminators of benign and malicious program executions
and is adversarial attack tolerant in terms of some contamination
in the training data.

5.1.3. Word embedding-based

Word embedding is a sequential representation method to cap-
ture semantic relation and contextual information from syscall
with reduced size vector. Word embedding has better gener-
alization capability than n-gram-based methods [S57]. Word
embedding significantly enhances the NLP classification task’s
performance due to capturing semantic features that motivates
HIDS researchers to use word embedding to deal with syscall
sequence [S57]. While One-Hot Encoding (OHE) in NLP is the
simplest method to represent categorical/text data for a classifier
[S9]. In HIDS, to use OHE, each syscall (word) is presented
as a vector, where each position in the vector represents a spe-
cific syscall. Hence, input vector size is the number of diverse
syscalls. A specific syscall is mapped to a binary vector with
all zeros except for a single one at the suitable position for
the corresponding syscall. OHE does not require specific prior
knowledge and complex feature selection [S8]. Additionally, it
preserves the original information of the data intact [S8]. How-
ever, using long OHE representation for syscalls can lead to
training neural networks with a huge number of weights [S9]. In
NLP, to mitigate the computational complexity and high train-
ing time due to sparse and high-dimensional vectors of OHE,
word embedding has proven its value. Hence, it is preferred to
use shorter vectors generated by word embedding to represent
syscalls. To detect intrusion in HIDS, researchers use diverse
word embedding methods from NLP such as Word2Vec [S14,
S47, S51], GloVe [S47, S51], FastText [S51] and Graph Random
State Embedding (GRSE) [S20] to represent the syscalls.

Word2Vec (Mikolov et al.| 2013) in NLP generates word


vectors based on the context in which they are used. Word2Vec
depends on words’ local context, in contrast, GloVe
uses global statistics on word co-occurrence
for learning words’ vector representations. In NLP, GloVe is
a count-based model that learns a word vector representation
using co-occurrence information, i.e., for each word, GloVe
count how frequently those words are used in some context in
a large corpus. FastText developed
by Facebook AI research extends Word2Vec by considering
sub-word information, whereas Word2Vec and GloVe do not
consider sub-word information. As the syscall names are chosen
based on their functionality, sub-words can provide supplemen-
tary information about relationships among syscalls [S51]. For
instance, directory is represented as ‘dir’ in short. Syscalls in-
cluding this sub-word (e.g., cddir, mkdir, rmdir, readdir, fchdir,
mkdirat) usually represent changes in the host’s file system ker-
nel module [S51], which is important for profiling host behavior.
Moreover, such sub-words include supplementary information
about their context (e.g., ccdir and mkdir represent that they
handle a directory).

Syscall sequences are essentially considered as word se-
quences (i.e., sentences). However, syscall sequence has several
distinct features compared to sentence. For instance, syscalls
have an implicit pattern relation, and the changing order among
patterns has less effect [S20]. Further, syscall occurrence count
often has little effect on the detection outcome. Syscalls also
have other characteristics (e.g., resource utilization, execution
time, predefined rules and empirical weights of syscalls). The
NLP methods that are usually used in HIDS (e.g., BoW, TF-IDF,
n-gram and Word2Vec), do not completely exploit such relations
in syscall sequence and can not simply support such properties
[S20]. To mitigate these limitations, a sequence embedding ap-
proach, namely, Graph Random State Embedding (GRSE) is
proposed using Word2Vec [S20]. To generate vectorized repre-
sentation of graph nodes GRSE performs random walk over the
graph network for generating graph node paths, which emulates
the text generation process (for HIDS, i.e., the process executing
a syscall) for obtaining various graph node access sequences.
Further, GRSE utilizes Word2Vec for learning all the nodes’ vec-
tor representations based on the random walk sequence, which
improves a HIDS’s performance.

A major challenge to develop HIDS with better performance
for a host domain with low resource is to mitigate the require-
ment of huge domain-specific data. To mitigate this challenge,
word embedding helps in domain adaptation following NLP
approach through transfer learning. A study [S12] showed
the applicability of word embedding-based transfer learning
by adopting a word embedding-based LSTM model that uses a
significantly lower amount of target HIDS domain data to detect
attacks in multiple host domains. This study [S12] further dis-
cussed both homogeneous and heterogeneous transfer learning-
based HIDS problems, where monolingual word embedding is
required for the homogeneous HIDS domain and bilingual word
embedding is needed for the heterogeneous HIDS domain.

5.1.4. Semantic ontology

To develop a HIDS with the capability of potentially link-
ing and inferring means and consequences of cyber threats and
vulnerabilities whose signatures are not yet available, knowl-
edge fusion from heterogeneous textual data sources is required
[S33]. For example, cyber threat intelligence data are available
at various textual sources (e.g., blogs and security bulletins)
[S26]. However, to gain the advantages of heterogeneous data
sources to detect any threats, a common semantic schema is
required to integrate information from disparate sources (e.g.,
different concepts and standards such as STIX, CVE, CVSS,
CAPEC and CYBOX from diverse intelligence sources) [S33].
To mitigate this issue, a semantic ontology in NLP can provide
a common semantic schema for integrating information from
diverse sources by describing concepts and relationships among
the concepts. To improve HIDS performance, semantic ontolo-
gies are used based on a semantic-reasoner along with a rule
engine for detecting intrusion [S13]. Semantic ontology not
only easily integrates information from textual sources but also
helps to detect existing attacks’ variations. For evading attacks,
attackers often use diverse tools which can perform similar ac-
tivities or use combinations of tools/techniques used in older
attacks. Further, attackers often use similar tools and exploit
similar vulnerabilities in varied attacks. As semantic ontology
can integrate information of diverse attacks and fuses it with
textual information, semantic ontology-based HIDS can detect
such new attacks [S26].

The first ontology-based HIDS [S13] aimed at providing se-
mantic expressiveness and knowledge description for improving
IDS performance and reducing the search time for malware
scanning. This study [S13] developed HIDS using Semantic
Web technologies that give well-defined meaning for enabling
computers and human to work in cooperation. Later, a study
[S26] proposed continuous integration of information from dy-
namic textual sources (e.g., threat intelligence information of
attack patterns, prior attacks, tools used for attacking and indica-
tors) and combined it with malware behavioral information for
detecting known and unknown attacks. This study [S26] used
an off-the-shelf Named-Entity Recognizer (NER) from NLP
trained on cyber security text to extract entities from plain text.
Similarly, another study [S33] extracted named entities from the
unstructured web-text for the continuous evolution of ontology.
This study [S33] integrated text data from the web with different
sensor streams, domain expert knowledge and constructed the
ontology based on three main classes: ‘means’, “consequences’
and ‘targets’. The ‘means’ class captures the approaches used to
execute an attack, the “consequences’ class captures the results
of the attack and the ‘target’ class captures the details of the host
under attack. Finally, this study [S33] has demonstrated the ef-
fectiveness of the semantic integration of web text for detecting
threats in HIDS.

5.1.5. Neural language modeling

To capture inter word relationships and predict the next words
in NLP, a neural language model performs probability distribu-
tion calculation over words’ sequences. Neural language model-
ing has achieved significant performance in realizing real-world


NLP tasks [S15], such as Google’s autocompletion and voice
assistant. Inspired by such significant performance, HIDS re-
searchers discovered surprising resemblance between the host’s
syscall sequence and natural language [S44, S63]. Researchers
consider syscall sequences as instances of the language for com-
munication between users (or programs) and host, where syscall
and syscall sequences refer to words and sentences in natural
languages [S63]. Due to this high resemblance of syscall se-
quence with natural language, researchers adopt neural language
modeling in HIDS to model syscall.

To monitor host system state and predict attack behavior, a
language model-based prediction module predicts syscall se-
quence which will be executed in the future (i.e., possibly to
execute during a known or unknown (zero-day) attack) [S44,
$63]. The use of neural language modeling enables HIDS to
model the semantic meaning of syscalls and analyze sequences
at the sentence level for building a robust syscall Sequence-to-
Sequence (Seq2Seq) prediction model. The Seq2Seq prediction
model is adopted from NLP Question-Answer model for gener-
ating future syscalls considering prior invoked syscall sequence
as question and generated syscall sequence as answer [S63].
Further, combining the prior invoked syscall traces with the
predicted syscall sequence drastically enhances the intrusion
detection performance, which is verified using different clas-
sifiers in HIDS [S15, S44]. As a Recurrent Neural Network
(RNN) has the inherent capability to process sequential data and
can memorize previous results, diverse variations of RNN (e.g.,
LSTM and Gated Recurrent Units (GRU)), RNN Variational
Encoder-Decoder (VED) and combination of CNN with RNN-
based language models (e.g., CNN-GRU, LSTM-textCNN) are
adopted to handle sequential syscall data in the HIDS research
domain.

RNN-VED-based language model: Seq2Seq language
model based on variational encoder-decoder (VED) and variants
of RNN showed promising performance in NLP. Researchers
[S5, S43] exploited the semantics behind the invoking order
of syscalls that are considered sentences. The RNN-VED in
HIDS [S5, S43] learns the correlation between the syscalls to
predict the future possible syscall sequence based on the given
context. Another study [S63] used RNNs and Variational Au-
toencoding language modeling for learning long-term syscall
sequences executed during an attack. This approach enables
effective prediction and classification of syscall sequences that
are possibly to occur next during known or unknown (zero-day)
attacks.

LSTM-based language model: Evolutionary intrusion at-
tacks (e.g., obfuscation technique) can change the malicious
syscall sequence so that it can bypass the intrusion detection;
and still can gain the same invasion purpose and effect that makes
the detection outcome not robust and even invalid. To detect
obfuscation attacks, a study [S22] used a behavioral semantics
enhancement method by using an LSTM Seq2Seq language
model that performs sequence completion. Then, the enhanced
sequences are represented as vector matrices which are the input
for the multi-channel Text-CNN that makes the model robust
to obfuscation attacks. This language modeling-based method
showed better intrusion detection performance and robustness

than other NLP methods such as syscall combinations, n-gram
subsequences and feature matching frequencies. LSTM model
in NLP requires a long training time and has a complex structure.
With the motivation of reducing training time, a study [S50]
used NVIDIA CUDA Deep Neural Network (CuDNN) library
to adopt CUDNNLSTM language model which is supported only
on GPU systems. CuDNNLSTM language model using a bidi-
rectional encoder and a unidirectional decoder is approximately
ten times faster than LSTM model for faster convergence during
training for HIDS development [S50].

GRU-based language model: The structure of GRU is sim-
pler and GRU can reduce the required training parameters com-
pared to LSTM. GRU [S44] and CNN-GRU [S15] language
models are used in the literature for reducing the required train-
ing time and improving the efficiency of HIDS. In the CNN-GRU
language model [S15], CNN layers are able to capture syscalls’
local correlations in the sequence and can improve efficiency
by executing in parallel. Then, the GRU layer is able to learn
syscall’s sequential correlations from these high-level features.
The CNN-GRU language model gained near state-of-the-art
performance and substantially reduced training time compared
to LSTM models. Traditional HIDS models consider syscall
traces generated by an individual process. However, multiple
processes are often utilized by modern applications and one
or more of these processes are impacted by modern attackers.
Hence, to modernize HIDS a Wave-Net architecture is used to
aggregate predictions for all processes corresponding to an appli-
cation [S21]. This approach [S21] outperformed the CNN-GRU
language model [S15].

5.1.6. Hybrid

To gain the advantage of multiple NLP methods, researchers
have adopted hybrid methods by combining different NLP meth-
ods. The hybrid method includes the combination of heteroge-
neous classifiers using different NLP methods, a combination
of n-gram and TF-IDF, a combination of n-gram and statistical
approaches and a combination of n-gram and data augmentation
methods.

Combination of heterogeneous classifiers using different
NLP methods: To reduce the FAR of HIDS and make the
HIDS more reliable and resilient against evasion and adversarial
attacks, a set of studies effectively combined decisions from
heterogeneous classifiers by using different NLP methods. A
few studies [S35, S64] have trained Sequence Time-Delay Em-
bedding (STIDE) and HMM utilizing n-gram-based sequential
features, and OCSVM utilizing TF-IDF vectors and effectively
combined decisions from these heterogeneous classifiers. An-
other study [S66] used a deep Multi-Layer Perceptron (MLP)-
based Neural Network (NN) to combine the detection outputs
of STIDE (n-gram-based), text classifier (TF-based) and syscall
graph-based detection. The combination of heterogeneous clas-
sifiers with heterogeneous NLP methods showed consistently
better performance than a single detector and ensemble of ho-
mogeneous detectors [S35].

Combination of n-gram and TF-IDF: TF-IDF denotes the
multiplication of TF and IDF scores of the word that is used to
weigh down the frequent words and scale up the rare ones. A set


of studies [S3, S6, S7] used TF-IDF vectorized n-gram vectors
to include sequence information to some extent (via n-gram)
for improving detection performance with lightweight TF-IDF-
based feature calculation for computation cost efficiency. Being
inspired by sentiment analysis in NLP, where combining 2-gram,
3-gram and 4-gram models improved accuracy, a study [S3]
combined 2-gram, 3-gram and 4-gram TF-IDF from selected
syscalls of a trace file. Based on these combined features, for
early detection of intrusions, researchers built a HIDS which
processes the first few hundred syscalls to detect intrusion for
an application. Since software applications’ complexity has
increased drastically, such applications invoke a large number
of syscalls in a short time, which demands early detection that
can consequently reduce HIDS resource consumption. Further,
truncated Singular Value Decomposition (SVD) based on the
TF-IDF values is used for reducing the transformed n-gram
feature vectors’ dimensionality, which gained high detection
performance with low processing overhead [S6].

Combination of n-gram and statistical approaches: Di-
verse statistical approaches to the n-gram-based NLP method
have been adopted in HIDS research for OS independent feature
generation. Such OS independent features have several advan-
tages such as (i) model transferring: HIDS model trained on
data from OS X can be utilized on OS Y as the data share the
same feature subspace and (ii) data transferring: data from OS X
can be selectively combined with the data from OS Y to enrich
the training data [S1]. Statistical methods used in HIDS are
standard deviation [S1, S40], mean [S1], skewness [S1], kurtosis
[S1], standard error [S1], eigenvector [S37] and entropy [S1,
S36]. For example, a study [S1] showed that statistical methods
(e.g., standard deviation and skewness) on n-gram frequency out-
performed the following NLP methods: (i) bag-of-syscalls; (41)
TF-IDF (iii) n-gram frequency; and (iv) n-grams based methods.

Combination of n-gram and data augmentation methods:
HIDS datasets usually suffer from data imbalance problem as
gaining malicious syscall trace is challenging and much less in
number compared to benign trace. The data imbalance problem
creates a bias in the HIDS prediction model towards the majority
benign class. To mitigate the data imbalance problem, a set of
studies used different approaches on the n-gram NLP method
such as Synthetic Minority Over-sampling Technique (SMOTE)
[S40] and data augmentation using Generative Adversarial Nets
(GAN) [S48], NLP-based Sequence Generative Adversarial
Nets (SeqGAN) [S45] and Sequence to Sequence (Seq2Seq)
[S45] models. A set of studies [S45, S48] showed that adding
augmented data to train HIDS using representation ML models
can improve HIDS performance. Besides, a study [S48]
showed that GAN provides a more reliable way to mitigate
data imbalance problem using data augmentation than SMOTE
over-sampling technique.

To summarize the NLP methods used in HIDS, word em-
bedding, language modeling and hybrid methods (i.e., combina-
tion of multiple NLP methods) are the prevalent NLP methods
used in HIDS. These NLP methods are also showing an increas-
ing trend over the last 4 years as demonstrated in Table[6| The
increasing amount of large-scale host security data and evolving

12

complex attack patterns have contributed to this increasing trend
of using these NLP methods that are evolved over deep learn-
ing models due to their prominent HIDS performance. Tablef7]
presents our deep comparison analysis of the NLP methods used
in HIDS, which is expected to help the HIDS researchers and
developers to choose the suitable NLP methods based on their
research goal and organization’s requirement, respectively.

5.2. Key Factors to Consider for Developing HIDS Using NLP

In this section, we summarize the key factors that need to
be considered by the HIDS developers for developing HIDS
using different NLP methods. Table [8|presents the key factors
considered in NLP-based HIDS development along with their
descriptions, strengths and weaknesses. Our deep comparison
analysis of the categories of these factors is expected to help
the HIDS developers to choose the suitable category for the
corresponding factors based on the organization’s requirements.
We describe the key factors such as i. HIDS type (Section|5.2. 1p;
ii. learning type (Section[5.2.2); iii. feature extraction method

(Section|5.2.3) and iv. classifiers (Section|5.2.4).

5.2.1. HIDS type

Two types of HIDS (i.e., misuse, anomaly) are developed
using NLP methods in our reviewed studies. Misuse (also called
signature-based) detection uses a library of known attacks’ sig-
natures and identifies system behaviors matching the signatures
present in the library as intrusions. For misuse detection, NLP
methods such as semantic ontology, can be used for integrating
attack signatures and information from diverse sources (e.g.,
cyber threat intelligence data and textual sources like security
blogs and bulletins). Misuse detection gains low FAR but is
unable to detect zero-day attacks (Liao et al.|/2013). However,
anomaly detection or behavior-based detection builds a model
based on the normal behavior of system activities and detects
deviations from normal patterns as anomalies, which can detect
zero-day attacks but have high FAR 2013). With
the continuously evolving threat landscape, attack signatures are
not always available. Hence, anomaly detection is a preferred
method to detect unknown zero-day attacks. NLP methods (e.g.,
word embedding, language modeling) help to characterize the
normal behavior of the system by preserving the semantics and
contextual information of the data, which makes NLP methods
highly suitable for developing anomaly-based HIDS.

5.2.2. Learning type

Different learning types (i.e., supervised, unsupervised, semi-
supervised) are adopted for attack detection in our reviewed
studies. The choice of a learning type highly depends on the
availability of labeled data. The unsupervised approach finds
patterns/partitions from unlabeled data. The semi-supervised
approach requires a portion of data to be labeled. However,
supervised learning requires complete labeled data. In the HIDS
domain, normal data is highly available (generated by the nor-
mal execution of programs within a system) but malicious data
is insufficient (which requires simulating the increasing attack
types). Thus, semi-supervised (used by 55.4% reviewed studies)


Table 8: Key factors considered in NLP-based HIDS development with their descriptions, strengths and weaknesses

Type Description Strengths Weaknesses
HIDS Types
Anomaly (59) — Detects deviations from normal patterns as__e Able to detect zero-day attacks e High false alarm rate
anomalies
Misuse (6) Detects system behaviors matching the sig- _ e Low false alarm rate e Unable to detect zero-day attacks
natures present in attack library as intrusions
Learning Types
Semi- Trains only normal samples with no anoma- —e Only the normal class’s labeled data is re- _e Suffers from high false alarm rate
supervised lies in a given training data set quired.
(36)
Supervised Uses labeled data to train a learning model —e Stable performance and effective way to _e Requires labeled training data that is costly
(27) on normal and attack data. detect known attacks. and time-consuming to gather
e Difficult to detect unknown attacks
Unsupervised Without any prior knowledge, utilize statisti-  e Does not require labeled training data e No access to information about distin-
(5) cal models to detect anomalies. e Lower computational complexity guished data patterns
Feature extraction techniques
Automated Features are extracted using automated ap- _e More efficient and repeatable e Computationally expensive
(55) proaches such as NLP methods (e.g., n-gram,  ¢ Less dependent on domain knowledge e Dependent on data size and quality
TF-IDF and word embedding). e Adaptable to new datasets
e Suitable for complex data with structural
and sequential dependencies
Manual (5) Features are extracted by manual data analy- _e Interpretable features e Highly depends on domain knowledge
sis and using domain knowledge. e Suitable for homogeneous data with linear _—_e Takes significant time and effort
patterns e Error prone
e Not scalable and dataset-dependent
Semi- Features are extracted using both manual and —e Gains advantages of both automated and —_e Needs more time than automated
automated automated techniques manual feature extraction e Needs more computation than manual
(5)
Classifiers
ML: Single A single ML model is used to perform the — e Easy implementation e Susceptible to overfitting
(38) prediction (e.g., SVM, NB) e Re-training on large scale dataset is effi- e May not perform as good as ensemble or

cient

DL models

ML: Ensemble
(7)

Combine predictions from two or more mod-
els (e.g., RF, XGBoost).

e Usually makes better predictions than sin-
gle contributing model.
e Less susceptible to overfitting

e Longer training time than single models

Rule or
sequence
matching (17)

Rules are defined (e.g., semantic ontology)
or sequence matching is performed to detect
attacks (e.g., SC4ID [S16])

e Usually parameter-free (apart from a deci-
sion threshold)

e Interpretable as they enable to find the lo-
cation of abnormal areas in long syscall se-
quence.

e Defining the rules and the decision thresh-
old is manual
e Requires domain expertise.

e Hold short or long-term dependencies from

e Better suited for sequence-based or textual

e Due to sequential processing, usually re-
quire longer training time than CNN

DL: RNN (12) | RNN is a type of NN that helps to model
sequential or time series data (e.g., LSTM, — sequence
GRU, BiLSTM)
HIDS data
DL: CNN (12) | CNN is a type of NN that captures local

features using convolution (e.g., text-CNN,
FCN, TCN)

e Holds local and hierarchical features
e Can perform parallel processing during
training, which is faster than sequential RNN

e Unable to effectively capture sequential
order of data that is important for handling
sequential data

anomaly detection by training with only normal samples and
detecting the deviations from the learned model as anomalous is
prevalent in the reviewed studies. NLP methods (e.g., n-gram,
word embedding) help to adopt a semi-supervised approach by
learning the normal behavior of the system through the seman-
tics and context of syscall sequence. However, semi-supervised
learning lead to high FAR as they classify the unseen normal be-
havior as attacks. Hence, diverse NLP-based data augmentation
techniques (e.g., SeqGAN [S45]) are being used to balance the
HIDS dataset for adopting a supervised approach that can lower
the FAR.

5.2.3. Feature extraction techniques

The collected raw syscall data need to be represented by appro-
priate features for training the HIDS detection models. Feature
extraction techniques used in the reviewed studies are manual,

13

automated or semi-automated (e.g., both manual and automated).
Manual features are extracted by manual data analysis and using
domain knowledge. However, the use of NLP methods such
as n-gram (e.g. [S11, S17]), TF-IDF (e.g. [S55]) and word
embedding (e.g. [S47, S51]) in HIDS enabled automated feature
extraction from HIDS dataset and made it suitable for complex
data with structural and sequential dependencies. Automated
feature extraction is a preferred choice as it reduces human effort
and can adapt to new datasets. Hence, in our reviewed studies
automated feature extraction method is prevalent (used by 84.6%
reviewed studies) as it does not depend on domain expertise and
makes the HIDS scalable and portable.

5.2.4. Classifier

The extracted NLP-based features are used in three types
of classifiers (i.e., traditional ML, rule-based and DL model)


for detecting intrusions in HIDS. While the earlier research in
NLP-based HIDS used the traditional ML-based classifiers (e.g.,
Support Vector Machines (SVM), Logistic Regression (LR)), in
the recent five years (i.e., 2018-2022), the trend is shifted to the
application of DL-based (e.g., text-CNN) and hybrid classifiers.
The possible reason behind the change in the trend can be the
highly increasing amount of data and evolving complex attacks
[S22]. DL is now being investigated more as it has the capability
to handle large-scale data and the complex DL structure tends to
provide better accuracy and lower FAR.

Traditional ML models: For the traditional ML models, sin-
gle models (e.g., SVM, Naive Bayes (NB)) were prevalent in
the earlier research time due to their simplicity. However, single
models do not perform as good as the ensemble of DL mod-
els. Among the single models, SVM and its variants are the

most popular algorithms (e.g., SVM, OCSVM) (Mohammadi|

2021) used for binary and one-class classification adopt-
ing supervised and semi-supervised learning, respectively. The

popularity of SVM is expected as SVM works well with the
commonly used NLP-based methods such as BoW and TF-IDF
(Le et al.|[2021). For example, OCSVM with variable length n-
gram features [S41] outperformed the approaches using TF/TF-
IDF features or using HMM, K-Nearest Neighbour (KNN) and
STIDE for attack detection. Another study [S59] proposed n-
gram-based and frequency of n-gram-based approaches, where
the frequency of n-gram-based OCSVM outperformed instance-
based methods (e.g., KNN, K-Furthest Neighbors (KFN)) of
prior studies [S28, S31], and had lower FAR than KEN. Besides
SVM, other commonly used single ML classifiers used for HIDS
are instance-based (e.g., KNN and KFN) and NN-based (e.g.,
MLP and Extreme Learning Machine (ELM)) single models.
Moreover, ensemble ML-based classifiers (e.g., Random Forest
(RF), EXtreme Gradient Boosting (XGBoost)) are used as they
are less prone to overfitting and usually perform better than sin-
gle ML-based classifiers. For example, for real-time detection of
applications which invoke a large number of syscall, a study [S3]
used RF. RF based on NLP-based TF-IDF of syscall sequences
outperformed various single classifiers such as Decision Tree
(DT), KNN, MLP, Multi-variable NB (MNB) and SVM [S3].

Rule or sequence matching: Another common approach
adopted in NLP-based HIDS is the rule (e.g., semantic ontology)
or sequence matching (e.g., SC4ID [S16]) to classify normal and
anomalous HIDS input syscall sequence. For example, a study
[S16] used a similarity approach SC4ID considering the minimal
number of subsequences required to build a complete covering
of a given sequence, which outperformed other text similarity
measures (e.g., Levenshtein’s distance, Longest Common Subse-
quence/Substring) in terms of accuracy and execution time. The
rule or sequence matching approaches are interpretable as they
enable to find the location of abnormal areas in long syscall se-
quences. However, defining the rules and the decision threshold
is manual and requires domain expertise.

DL models: The adoption of NLP-based DL models gained
tremendous popularity in HIDS from 2018 and showed better
results than traditional ML and rule or sequence matching-based
models. In the HIDS domain, the use of DL models not only
enabled anomaly detection (binary classification) and attack

14

detection (multi-class classification for specific attack detection)
but also enabled prediction of the future syscall during an attack.
The prevalent practice in NLP-based HIDS is to use variants
of RNN (e.g., [S11, $12, S38, S43, $47, S51, S62]) and CNN
(e.g., [S8 , S9, S17, S22, S48, S57, S63]), while a few studies
used other DL models such as Deep Multi-layer Perceptron
(Deep MLP) [S18, S53], Autoencoder [S9, S38, S43, S62]
and Deep Belief Network (DBN) [S55]. Due to RNN’s
intrinsic capability of handling sequence data
that can capture short or long-term dependencies of the input
sequence, a wide variety of RNN (e.g., LSTM, GRU, BiLSTM,
CuDNNLSTM) are frequently used in syscall sequence-based
HIDS. However, RNN works in a sequential manner and takes
longer training time than CNN as the CNN model can be
trained in parallel. Different CNN models (e.g., text-CNN, Fully
Convolutional Network (FCN), Temporal Convolutional Neural
Network (TCN)) have been adopted in HIDS. While CNN can
capture the local and hierarchical features, it can not effectively
capture the sequential order of data which is required for syscall
sequence data handling. The latest trend is to ensemble CNN
and RNN models to gain the advantage of both models, where
CNN extracts local syscall relation features and RNN captures
syscall sequences context by extracting long-distance sequence
dependency. For example, a study [S4] used 7 ensemble
DL classifiers such as dual-flow (LSTM-FCN, GRU-FCN),
FCN and Windows OS data-specific (i.e., AWSCTD dataset)
models (CNN-Dynamic (CNN-D), CNN-LSTM, CNN-GRU
and CNN-Static (CNN-S)). However, the complex dual-flow
models did not show any advantage over the single-flow models
(e.g., CNN-S) for data processing and increased training and
detection time, which hinders real-time detection [S4].

To summarize the key factors considered while develop-
ing NLP-based HIDS, the prevalent practice in terms of HIDS
types is anomaly-based detection which helps to detect unknown
zero-day attacks. Besides, the dominant practice in terms of
learning types used for NLP-based HIDS is semi-supervised
learning approach which helps to address the lack of balanced
available HIDS datasets. In addition, the dominant practice in
terms of feature extraction used for NLP-based HIDS is auto-
mated feature extraction which helps to extract features from
complex HIDS data with structural and sequential dependencies.
The adoption of NLP-based DL models helped to achieve better
results than traditional ML and rule or sequence matching-based
models for HIDS using NLP methods, which gained tremendous
popularity in HIDS since 2018 in terms of classifiers used for
NLP-based HIDS.

6. RQ2: Evaluation of NLP Method-based HIDS

To answer RQ2, we analyze the evaluation of NLP method-
based HIDS in terms of

e RQ2.1 Attacks detected by NLP method-based HIDS (Sec-
tion|6. 1p;

e RQ2.2 Datasets used to apply NLP methods to develop
HIDS (in Section[6.2); and


e RQ2.3 Evaluation metrics that are used to evaluate NLP
method-based HIDS (in Section|6.3).

6.1. RQ2.1: Attacks Detected by NLP Method-based HIDS

Our motivation for studying and categorizing security attacks
is to contextualize the attacks that are targeted to be detected
by the reviewed NLP-based HIDS. To answer RQ2, we cate-
gorize attacks that are detected using NLP methods in HIDS
by the reviewed papers, where the HIDS is evaluated against a
dataset including particular attacks. 133 instances were reported
as attacks in the reviewed studies, which we categorized into
12 attack categories. Table [9] shows the attack categories and
highlights the impacts of the attacks on the security require-
ments, which provide a deep understanding of security attacks
and the invasion target. The attack categorization was adapted
and adjusted from a prior study (Khraisat et al.|[2019). Later, we
show the mapping of the attack categories adopted in the used
datasets for NLP-based HIDS in Figure[4](b) of Section|6.2|

6.1.1, Attack impacts on security requirements

We consider the three most significant security requirements
(i.e., Confidentiality-Integrity-Availability (CIA)), that need to
be provided by a security framework 2022). These
requirements are impacted by security attacks, and can leave dis-
astrous consequences on host systems, such as loss of personal
information and business reputation along with financial losses
due to the impact on the requirements by security attacks. These
requirements are also known as CIA triad, which we describe as
follows.

e Confidentiality ensures data security by preventing infor-
mation from being disclosed to unauthorized individuals,
entities or processes.

e Data integrity protects data from unauthorized modifica-
tions throughout its life cycle, ensuring its accuracy, trust-
worthiness and validity.

e Availability ensures the availability of information or ser-
vices for legitimate users upon demand.

6.1.2. Categorization of attacks detected in NLP-based HIDS

In this section, we discuss the attack categories that can be
detected using NLP-based HIDS, in terms of included attacks
and impacts on the above security requirements.

(1) Remote to Local (R2L) is the most reported attack type in
our reviewed studies. It involves attackers exploiting the host’s
vulnerability to gain illegal local access and affects data integrity
(2008). An example of R2L attack instance
is Tomcat v6.0.20, which enables remote intruders to execute
unrestricted file upload attacks. Another example is ncftp, which
is a Linux FTP file access-utility version with a bug that allows
remote commands to execute on a local host.

(2) User to Root (U2R) attack enables intruders to gain a sys-
tem’s root access starting with access to a normal user account
(achieved by password sniffing, dictionary attack, or social engi-
neering) (2008). It bypasses the authentication
and threatens the data integrity by removing security policy-
specified files from the victim hosts. An example of U2R attack

15

instance is Adduser that creates new superuser to gain root access
to a host utilizing a corrupted executable.

(3) Arbitrary Code Execution (ACE) involves an attacker
gaining control by injecting his own code by exploiting some
vulnerability. It can affect any of the security requirements de-
pending on the target of the executed arbitrary code/commands
on a target host (2014). An example of ACE
attack instance is XAMPP Lite v1.7.3 that permits a remote in-
truder to run malicious payload utilizing Xampp_webdav appli-
cation. Another ACE example is Jcecast v2.0 that allows remote
attackers executing arbitrary code using an HTTP request.

(4) Brute force attack employs a trial and error process that
generates a huge number of guesses and validates them to col-
lect data (e.g., account password, personal id number), which
damages the data confidentiality and can circumvent the authen-
tication by acquiring an authorized user login information. For
example, a vulnerability (CVE 2012-2122) of MySQL 14.14
allows intruders to bypass the authentication process by authen-
ticating the same incorrect password repeatedly.

(5) Denial of Service (DoS) attack denies the legitimate user
access to a host machine or service by making the computa-
tion resources extremely busy to manage legitimate requests
(Simmons et al.][2014). Examples of DoS include exploiting
Apache web server vulnerability CVE 2012-0021 for causing
a daemon crash using an empty cookie [S24] and tcpreset that
terminates host TCP connections [2008). Dis-
tributed DoS (DDoS) attack uses multiple machines to flood
a targeted resource that is detected in a few reviewed studies
[S1, S17]. Besides, forwarding loops are potential DoS attacks
as they cause one request to be processed repeatedly or even
indefinitely, resulting in undesired resource consumption that is
detected in several reviewed studies (e.g., [S16, S52]).

(6) Backdoor secures remote access to a machine, or plain
text in a cryptographic system, which attackers can use to get
access to sensitive host data (e.g., passwords), alter or remove
information on hard drives and transfer data across networks.
Backdoor attack impacts confidentiality and integrity. For exam-
ple, Win32.Hydraqa is a family of backdoors [S36].

(7) Worm is a malware type, which replicates itself to spread
to uninfected hosts throughout the network without human in-
tervention (Simmons et al.}/2014). Worms can damage service
availability by consuming bandwidth/storage space, and affect
data integrity by corrupting or modifying files on a target host.
For example, NetSky.y, Zhelatin.ug and Mytob.x are worms,
which can overwrite other executables and try to exploit host OS
components [S36].

(8) Trojan is a program that appears appealing and legitimate
but has anomalous code in it, which can affect any of the security
requirements. For example, AdWare is a software which auto-
matically shows advertisement pop-ups while a user is online.
Other examples include Trojan-PSW which steals user account
information, WebToolbar that installs in-browser content without
users’ consent and Trojan-Ransom that prevents user’s access to
demand payment.

(9) Data theft threatens data confidentiality by stealing in-
formation stored on corporate databases, devices and servers.
An instance of data theft is observed in a study [S24], which


Table 9: Categorization of attacks identified in NLP-based HIDS

Attack Impacted Attack Instances Study Ref
Type Requirement
R2L (55) Integrity imap, xlock, sshtrojan, ppmacro, netbus, sendmail, sn- S1, $2, S3, $5, S6, S7, S8, S9, S11, $12, $14, $15, S16, S17, S18,
mpget, ncftp, httptunnel, xsnoop, named, dict, frame- S19, S20, S21, S22, S23, $24, S25, $27, $28, S29, S30, S31, $33,
spoof, netcat, guest, ftpwrite, phf, WebShell, ShellCode, $35, S37, S38, S40, S41, S42, S43, S44, S45, S46, S47, S48, S49,
Tomcat v6.0.20, decode S50, S51, S52, S53, S54, S55, S56, S57, S58, S59, S60, S61, S62,
S63
U2R (53) Integrity Adduser, sechole, ps, secret, perl, fdformat, casesen, S1, $2, S3, $5, S6, S7, S8, S9, S11, S14, S15, $16, S17, S18, S19,
ntfsdos, yaga, ppmacro, eject, loadmodule, nukepw, S20, S21, S22, S23, S24, $25, S27, $28, S29, S30, S31, S35, $37,
sqlattack, xterm, ffbconfig, sunsendmailcp, syslog, CVE- $38, S40, S41, S42, $43, S44, S45, S46, S47, S48, S49, S50, S51,
2015-5602, CVE-2016-5195 $52, S53, $54, S55, S56, S57, S58, S59, S60, S61, S62, S63
ACE (48) All Meterpreter, Java-Meterpreter, XAMPP Lite v1.7.3, Ice- S1, $2, S3, $5, S6, S7, S8, S9, S11, S12, $14, S15, S16, S17, $18,
cast v2.0, OS SMB, OS Print Spool, PMWiki v2.2.30, S19, S20, S21, S22, $23, S24, S25, $28, $29, S30, S31, S33, S35,
Wireless Karma, Adobe Reader 9.3.0, IE v6.0.2900.2180, S36, S37, S38, S40, S41, S42, S43, S44, S45, S46, S47, S48, S50,
Infectious Media, CVE 2012-0911, CVE-2009- 0927, S51, S54, S55, S57, S59, S62, S63
PDFKA, CVE-2014-3120, CVE-2015-1427, CVE-2014-
6271, Zip Slip, Redis, PHP-FPM
Brute force Confidentiality Password bruteforce (Hydra, Hydra-FTP, Hydra-SSH), $1, $2, 83, S5, S6, S7, S8, S9, S11, $14, $15, S16, S17, $18, $19,
(45) CVE 2012-2122, CWE-307 $20, S21, S22, S23, $24, S25, S28, S29, $30, S31, S35, S37, S38,
S40, S41, S42, S43, S44, S45, S46, S47, S48, S50, S51, S54, S55,
S57, S59, S62, S63
DoS (21) Availability selfping, dosnuke, back, tcpreset, syslogd, arppoison, S1, S6,S7,S9, S12, S16, S17, S18, S23, S24, S27, S30, S42, S49,
mailbomb, teardrop, processtable, neptune, udpstorm, S52, S53, S54, S56, S58, S60, S61
land, warezclient, apache2, crashiis, smurf, pod, DDoS,
CVE 2012-0021, CesarFTP 0.99g, forwarding loops,
CVE-2016-6515
Backdoors Confidentiality, Backdoor executables , Win32.Hydraq S1, S4, S6, S9, S10, $12, S17, S36, S42, S54
(10) Integrity
Worm (6) Integrity, W32.Deborm. Y, W32.HLLW.Doomjuice.B, $1,589, S17, S35, S36, S64
Availability W32.Korgo.X, W32.Sasser.D, Daber.A, Slackor.A,
NetSky.y, Mytob.x, Zhelatin.uq
Trojan (5) All Ransom, Downloader, Spy, PSW, Dropper, Clicker, Ad- S4, S10, S26, S35, S64
Ware, WebToolbar, DangerousObject, RiskTool, Wan-
nacry
Data Theft Confidentiality Reconnaissance, CVE 2011-1153, CVE4-2014-0160 $1, S89, S17, S24
(4)
Probe (3) Confidentiality portsweep, queso, msscan, Isdomain, illegal-snifer, S12, S18, S30
ipsweep ntinfoscan, satan, doppelganger, chimera,
chameleon
Virus (3) All W32/Virut.n, ZOmbie.MistFall.3 S4, S10, $36
Misc (25) All Iprep, sm565a, sm5x, Packed, generic, IE deleted object S1,S4,S7, 89, S10, S13, S16, S17, $18, S23, S27, S30, S32, $34,

vulnerability, CWES-434, CWE-89

$36, $38, $39, $49, $52, $53, $56, $58, S60, S61, S65

uses PHP 5.3.5 vulnerability CVE 2011-1153 that steals context-
sensitive data from the memory of the host process.

(10) Probe attacks scan a host automatically to gather records
of private systems or a DNS server that devastates data con-
fidentiality (Thomas et al.|[2008). For example, ipsweep and
Isdomain enable finding legitimate IP addresses. Mscan and
queso enable finding host OS types. Portsweep enables finding
active ports.

(11) Virus is a code that attaches itself through any infected
host files and self-replicates when the program is run (Simmons|
let al.|/2014). Based on the target of the executed code, a virus
can pose a threat to each security requirement. Examples in-
clude W32/Virut.n which is a polymorphic virus infecting HTML
files and ZOmbie.MistFall.3 metamorphic virus infecting other
executables [S36].

(12) Miscellaneous category covers the remaining types of
attacks that can affect different security requirements depending
on the target of performed activities. If the details of the detected
attack (i.e., anomaly) are not presented in the corresponding
reviewed study, we referred them under this category. Examples

16

include /prcp attack script that replaces arbitrary file contents
and Packed that refers to compressed obfuscated malicious
programs, which cannot be analyzed. Another example is
exploiting Internet Explorer’s (IE) deleted object vulnerability
[S36].

To summarize RQ2.1, we identified that all the NLP method
categories (described in Section|5.1) have been explored to de-
tect the top 3 frequent attack types such as R2L, U2R and ACE,
as shown in Table[9| Besides, hybrid NLP-methods have been
explored to detect all attack categories. Semantic ontology has
the ability to correlate multiple attack instances, which enable to
dynamically detect diverse attacks in HIDS [S13] and language
modeling has been shown to significantly improve the HIDS
detection performance [S5], however, we observed ontology and
language modeling are yet to explore the detection of the dif-
ferent attack categories (e.g., DoS, Probe, Virus and Backdoor).
We present Table[9]to help researchers and developers to learn
about the attack types, the relevant attack instances and impact
of these attacks that they aim to detect using NLP-based HIDS.


0 10 20

25

30
AWSCTD |
PUS
NGIDS-DS
UNM

Real

DARPA
Firefox DS
PLAID
LID-DS

Sim

public

ADFA-LD
ADFA-WD
ADFA-WD:SAA
CANALI-WD

Hybrid

Customized

Customized

@ private
Sim Real

N-gram Word freq ™Wordencoding ® Ontology

a) Analysis of datasets with respect to NLP-based HIDS categorization

™ Language Modeling ™ Hybrid

35

= DoS
m Probe

| R2L
m™U2R
= Wom
@ Trojan
@ Virus
m Brute force
@ Backdoors
@ Data Theft
m ACE

@ Misc

b) Mapping of attack categories
included in corresponding dataset

Figure 4: Analysis of datasets grouped by type and availability with respect to NLP solutions categories and attack types

Table 10: Type of NLP-based HIDS datasets, their description with strengths and weaknesses

Type Description Strengths Weaknesses

Real Datasets including real data captured from _ e Providing true distribution of data e Imbalanced datasets with an insufficient num-
a real organization/production environment. ber of malicious activity
Both data and environment are real. e Covering a limited attack types

Simulated Dataset including either synthetic data (e.g., | ¢ Able to reproduce balanced datasets. e Tool specific

artificially generated data) or data captured
within a test bed or emulated controlled en-

vironment. available.

e Able to generate rare misuse events.
e Useful for attacks for which real data is not

e May not depict the real distribution of data
e May not represent a real heterogeneous envi-
ronment.

6.2. RQ2.2: Datasets Used to Apply NLP Methods for Develop-
ing HIDS

We identified 20 different datasets employed in the reviewed
NLP-based HIDS. We discuss the characteristics of these
datasets with respect to types of datasets, availability, included
attack and NLP methods used on these datasets. Figure/4|shows
the distribution of the datasets along with their types of datasets
and availability with respect to NLP-based HIDS solutions cate-
gorization. Figure[4]also shows the different attack categories
that are present in the corresponding dataset along with the total
attack categories available in that dataset to show the diversity
of the included attacks. Figure [4] presents a comprehensive
overview of the datasets to help practitioners and researchers to
understand these characteristics of the datasets.

The primary data source of these datasets that are used to ap-
ply NLP methods in HIDS research is syscall sequence. Syscall
sequence is a primary artifact of the OS kernel. Syscall se-
quence is considered the most reliable data source for intrusion
detection as they represent low-level information without any
filtering and processing [S4]. Since in syscall sequence, any
filtering, interpretation and processing are not used, it can not
obfuscate events [S40]. Datasets have been generated by collect-

17

ing syscall sequences either in real (i.e., organization/production
environment), simulated (either synthetic data or controlled en-
vironment (e.g., testbed, emulation environment, lab)) or hybrid
environments. Inspired by an existing dataset classification
(2019), we have categorized datasets used by the
HIDS researchers into real, simulated and hybrid categories to
identify and characterize the existing practices adopted to evalu-
ate HIDS. While real dataset represents the true distribution of
data, it usually provides imbalanced dataset with limited attack
types. In contrast, simulated dataset is able to generate balanced
dataset, which may not depict the true data distribution. Hy-
brid dataset can gain the advantage of both real and simulated
dataset. Table[I0|describes the types of datasets along with their
strengths and weaknesses. The details of the study mapping
with the dataset types are available in Table A.2 of our online
appendix (Zarrin Tasnim Sworna and Babar 2022).

The availability of the identified datasets is categorized as
public and private (i.e., customized). Public datasets in the
HIDS domain are usually outdated, lack sufficient labeled data
and do not cover a wide variety of attack types as shown in
Figure [4] To overcome these limitations, some studies were
motivated to explore methods for generating new customized


datasets, which are usually kept private. Table [I] presents a
list of currently accessible public datasets used in our reviewed
studies with their description, strengths and weaknesses to help
HIDS researchers and developers easily identify and choose the
required public datasets to develop or evaluate their NLP-based
HIDS.

We discuss the identified datasets in terms of types and avail-
ability such as we discuss public simulated dataset in Section
6.2.1] public real dataset in Section|6.2.2] public hybrid dataset

in Section private simulate dataset in Section and
private real dataset in Section

6.2.1. Public simulated dataset

We identified six public simulated datasets such as 1. Defence
Advanced Research Project Agency (DARPA) or Knowledge
Discovery and Data Mining (KDD)); ii. University of New Mex-
ico (UNM); iii. Firefox DS; iv. Next Generation Intrusion
Detection Systems Data Set (NGIDS-DS); v. Leipzig Intrusion
Detection-Data Set (LID-DS) and vi. Lab Artificial Intrusion
Dataset (PLAID), which we discuss in this section.

DARPA or KDD : DARPA or
KDD are the earliest efforts of IDS dataset which are focused
on NIDS data and lack sufficient information needed to train
HIDS using suitable NLP methods [S10]. The DARPA dataset
was generated in a testbed and includes information of syscalls
generated by running programs for 7 weeks for the training
dataset and 2 weeks for the test dataset [S18]. Though DARPA
includes DoS, R2L, U2R and Probe attacks, it is considered ob-
solete as it is unable to accommodate the latest trend in attacks
(Moustafa and Slay\|2015). The hardware and the corresponding
OS with their syscalls of this outdated dataset have changed over
time. DARPA and KDD datasets were adopted in two studies
[S18, S30] along with the UNM and Australian Defense Force
Academy Linux Dataset (ADFA-LD) datasets to cover diverse
complexity levels (i.e., syscall sequence generated by differ-
ent running programs), where DARPA represents the simplest
dataset.

UNM (UNM} |2004): UNM includes program traces which
were collected during live execution of privileged host programs.
It also includes simulated traces which were collected using a
script to collect ‘xlock’ program’s commands [S53]. Every trace
includes a complete set of syscalls made during the program
execution (e.g., login, sendmail) from start to end. A few studies
[S60, S62] used syscalls of only specific programs (e.g., send-
mail [S60, S61]). UNM dataset includes different attacks such
as U2R, R2L and DoS. UNM being an old dataset, most of the
studies that adopted this dataset used the classical n-gram-based
NLP method with diverse classifiers. In spite of a remarkable
usage of the UNM dataset in developing HIDS research, that
dataset is marked as outdated and limited in scope
[Hu] /2013a). UNM does not reflect the sophistication of modern
attacks, and both normal and attack traces no longer represent
the complexity of current host systems due to their outdatedness
[S41]. Besides, the benign syscall traces in UNM dataset were
generated by executing small programs for a longer time period
that generated the same syscall execution paths [S23]. Still, they
are being used for benchmarking HIDS [S18, S30] along with

the newer datasets to show the effectiveness of diverse datasets
as there is a lack of many publicly accessible datasets.

Firefox DS (Murtaza et al.|/2013): To overcome the above-
mentioned issues of UNM dataset, firefox dataset was created
for Firefox web browser. It includes 700 normal syscall traces of
Firefox3.5 by executing 7 diverse testing frameworks, where ev-
ery testing framework executed various Firefox components and
functionalities [S23]. This dataset includes 19 anomalous syscall
traces by launching contemporary attacks including ACE and
DoS attack types against Firefox, selected from public advisories
and resources (e.g., Metasploit (Metasploit| [2020)). However,
Firefox-DS is a small-scale dataset including a very limited
number of attack traces. Hence, when using this dataset, other
large-scale datasets should be used to evaluate the scalability of
the proposed NLP-based HIDS.

NGIDS-DS (Haider et al.|/2017): It is a relatively new Linux

OS-based dataset that is generated in an emulated environment
(Ring et al.|[2019). NGIDS-DS includes 99 host log files, where
each record represents all the corresponding information (e.g.,
syscalls, path and attack category) about an occurred event, for
both normal and anomalous activities (e.g., DoS, worm and back-
door). Only n-gram-based and hybrid approaches were adopted
by the reviewed studies to evaluate HIDS using this dataset.
Though NGIDS-DS includes diverse attacks and thread infor-
mation, more accurate timestamps are missing, which makes it
impossible to determine a deterministic order of syscalls reli-
ably [S9]. Since several syscalls are with the same timestamp,
and event-ids’ order sometimes contradicts timestamps’ order,
reconstructing the correct sequence of syscalls is difficult.

LID-DS (Grimmer et al.|[2019b): To mitigate the incorrect
sequence issue of NGIDS-DS dataset, LID-DS is released with
the unambiguous syscall sequence and their thread assignment.
The software of modern IT systems is multi-threaded, thus di-
verse syscalls may belong to different threads and users. The
traditional HIDS does not consider the thread in which a syscall
is executed, which consequently ignores the fact that software
of modern IT systems is usually multi-threaded. Execution
schedule of OS may generate diverse syscall sequences for mul-
tiple executions of the same software with the same input data.
Hence, this can negatively impact the accuracy of the HIDS
which focuses on syscall subsequence learning and analyzing
[S9]. Hence, LID-DS includes several features that are unavail-
able in the earlier datasets such as syscall, timestamp, thread
id, process name, argument, return data and excerpt of data
buffer from syscall traces of normal and anomalous behavior
of multiple recent, multi-process and multi-threaded scenarios.
Using the comparative analysis of different NLP methods (e.g.,
n-gram, word-embedding), a study [S9] showed that the included
thread information from LID-DS enhances detection accuracy
and reduces FAR.

PLAID (2021) [S21]: While HIDS traditionally considers
syscall traces generated by a single process, modern applica-
tions often use multiple processes. Besides, one or multiple
processes can be impacted by modern attacks. Hence, the lat-
est syscall sequence-based dataset, PLAID, includes attacks in
multi-process applications. PLAID is Linux OS-based with
modern syscalls and modern attacks. PLAID includes syscall


Table 11: Public datasets used in reviewed NLP-based HIDS with description, strengths and weaknesses

Dataset Description Strengths Weaknesses

DARPA/KDD Includes Basic Security Module (BSM) data _—e First standard corpora for evaluation of — e Very obsolete, unable to accommodate the
(Cunningham | file with syscall-based audit data produced in NIDS and widely used as benchmark latest trend in attacks

1 a victim’s machine for host-level audit. e Includes arguments and return values e Focus on NIDS and lacks the information
1998/99 required to train HIDS-suitable methods

PUS-DS [S58]
2000

A syscall dataset collected from 8 users
within 2 years. One of the user’s data is con-
sidered normal data, and it is mixed with few
other user data to consider abnormal

e Real dataset collected from eight different
users

e Lacks attack scenarios and attack diversity
e Outdated, unable to represent latest user
behavior

UNM Includes synthetic sendmail UNM, synthetic —_e Includes programs of varied size and com- _e Very obsolete
sendmail CERT, live lpr UNM and live Ipr _ plexity, and different kinds of intrusions — e Lacks syscall arguments or other metadata
2004 MIT datasets. Synthetic traces were collected (buffer overflows, symbolic link attacks and —_e Extremely limited in scope and not repre-

by running a prepared script. Trojan programs) sent a full sampling of OS, focus on single

processes (process IDs, syscall IDs)
CANALI-WD Includes program execution traces observed _ e Presents a large collection of anomalous _e Lacks some useful information such as
(Canali et al.) both ina synthetic environment and on real- traces compared to previously published syscall arguments, timestamp, etc.
2012! world machines with actual users and under __ syscall datasets (e.g., UNM).
2012 normal operating conditions. e Not biased towards particular runtime envi-
ronments, or usage patterns.

Firefox DS Includes normal traces of Firefox 3.5 by exe- | e The completeness of Firefox’s normal be- _ e Lacks attack diversity

1

Dre
os
=| =
ul
a
p
N
p
oO
S
p

cuting 7 testing frameworks and anomalous
traces by launching contemporary attacks
against Firefox.

havior is ensured using code coverage for
test-case execution, which resulted in 60%
source code coverage

e All the traces are specific to firefox.

Ss
o/c
| TI} &
SP
aS
a|U
an
rl

Alternative to older datasets (DARPA, UNM)
and collected under Ubuntu OS running ser-

e To attain a realistic defensive and attack-
ing environment, a system was attacked by

e Outdated and not representative of contem-
porary attacks

2013a vices and simulating attacks. a certified penetration tester with 60 differ- e Lacks syscall argument, return data and
2013 ent attacks belonging to U2R, R2L, ACE and __ other metadata
brute force attack types.
ADFA-WD Collected on a Windows host, and a total of — ¢ Real vulnerabilities in commonly used soft- _ e Outdated and not representative of contem-
12 known vulnerabilities were exploited to | ware were considered for generating attack —_ porary attacks
simulate different attack types. data e Lacks syscall arguments, return values, or
2013 other metadata
e Inadequate number of vulnerabilities used
to create malicious activity
2018
ADFA- An extension of ADFA-WD which includes —_e Suitable for evaluation against stealth at- e Lacks metadata
WD:SAA Windows-based stealth attacks tacks e Attack types limited to stealth attacks

(Haider et al.

2016) 2016

NGIDS-DS

(Haider_et_al,
2017

Obtained from Ubuntu 14.0.4 host that is
equipped with an auditing mechanism and
includes 99 host log files.

e Up-to-date and synthetically realistic
e Includes thread info, timestamp, eventID,
path, processID, syscall, etc.

e Loss of parameters and more accurate
timestamps

Includes benign software samples as benign
data and public malware files from Virus
Share and publicly avail-
able data about the malwares identified from
Virus Total as attack data.

e New extended dataset for Windows
e Includes parameters (syscall args, return
value) for in-depth training

e Includes only different Malware types and
lacks other types of diverse attacks.

A modern data set collected from a modern
OS (Ubuntu 18.04) by considering diverse
scenarios of real vulnerabilities.

e Consists of different real vulnerabilities sce-
narios.

e Includes unambiguous syscall sequence
and their thread assignment of recent multi-
threaded scenarios.

e Includes parameter, return data, user id, pro-
cess/thread id, file system handle, timestamp
and I/O buffer

e Only available for Linux OS

PLAID [S21]
2021

Includes modern system calls and contempo-
rary attack types collected on Ubuntu 18.04
LTS.

e The most up-to-date HIDS dataset currently
available.

e Includes attacks in multi-process applica-
tions.

e Lacks syscall arguments, return values, or
other metadata.
e Includes only six attack vectors.

*PUS-DS and Firefox-DS are not currently accessible

19


sequences from 6 current exploits and penetration methods along
with a huge collection from benign operations.

6.2.2. Public real datasets

We identified two public real datasets such as i. Purdue Unix
Shell (PUS) and ii. Attack-caused Windows OS syscall Traces
Dataset (AWSCTD), which we discuss in this section.

PUS (2000) [S58]: PUS is a real dataset, which is a syscall
dataset collected from 8 users within 2 years [S58]. One of the
user’s data is considered normal data, and it is mixed with a
few other user data to consider abnormal data. PUS lacks attack
scenarios and attack diversity. Besides, PUS is outdated and
unable to represent the latest user behavior.

AWSCTD 2018): AWSCTD is con-
sidered one of the biggest syscall collection running on Windows
OS that includes 112.56 million syscalls from 12110 executable
malware samples and 16.3 million syscalls from 3145 benign
software samples. AWSCTD includes malware-initiated system
calls which were collected from publicly available malware files

from VirusShare (VirusShare} |2017) and real world malware
information from VirusTotal (VirusTotal}|2017). It includes dif-

ferent attacks such as worm, trojan and backdoor. AWSCTD is
adopted by 2 studies [S4, $10] that showed word embedding-
based CNN outperformed RNNs [S10] and complex dual-flow
models including CNN and RNN models (e.g., LSTM-FCN
and GRU-FCN) [S4]. As Windows is still a popular OS, HIDS
researchers and developers who are interested in Windows OS-
specific HIDS development can use the AWSCTD dataset as
it is a real extended dataset compared to other Windows-based
datasets [S10].

6.2.3. Public hybrid dataset

We identified four public hybrid datasets including i.
CANALI Windows Datasets (CANALI-WD); and three Aus-
tralian Defence Force Academy (ADFA) family datasets such
as ii. ADFA Linux Dataset (ADFA-LD); iii. ADFA Windows
Dataset (ADFA-WD) and iv. ADFA Windows Dataset: Stealth
Attacks Addendum (ADFA-WD:SAA\), which we discuss in this
section.

CANALI-WD (Canali et al.| [2012): It is a Windows OS-
based dataset that includes program execution syscall traces ob-
served both in simulated (based on Anubis (Lab) {2011)) and the
real-world environment with actual users. CANALI-WD dataset
includes 2 normal datasets, namely, Goodware and Anubis-good
[S64]. Goodware includes 180 GB syscall traces gathered from
10 real world host systems, used by regular users and Anubis-
good includes syscall traces of 36 normal applications executed
under Anubis. CANALI-WD also includes 2 malware datasets,
namely, malware and malware-test. The malware dataset in-
cludes 5,855 malware (e.g., botnets and worms) syscall traces
randomly extracted from Anubis and the malware-test dataset
includes 1,200 syscall traces of malware collected from another
machine that was not used by Anubis. While the previously
published syscall datasets (e.g., DARPA and UNM) have limited
malicious traces, CANALI-WD presents a huge collection of
malicious traces.

20

ADFA-LD (Creech and Hu}|2013a): The outdated datasets
such as DARPA and UNM, which are based on more than 20

years old software which are usually no longer in use to de-
tect or reflect the modern intricate security attacks. To replace
these outdated datasets and represent modern attack structure
and methodology, Australian Centre of Cyber-Security released
two datasets for two different OS (i.e., Linux and Windows)
named ADFA-LD and ADFA-WD, respectively. ADFA-LD is
a dataset of syscall traces of Linux OS, which is the most used
dataset to evaluate NLP method-based HIDS. ADFA-LD con-
sists of syscall traces of different active services during normal
host operation, where the included activities range from web
browsing to LATEX document preparation. To attain a realistic
defensive and attacking environment, a system was attacked by
a certified penetration tester with 60 different attacks belonging
to U2R, R2L, ACE and brute force attack types. During the exe-
cution of attacks, the corresponding syscall traces were recorded.
ADFA-LD includes 833 normal training syscall sequences, 746
attacks and 4372 normal validation syscall sequences to evaluate
HIDS. The scale of ADFA-LD dataset is considered suitable for
training deep neural networks [S5, S15]. All the reported NLP
categories except the semantic ontology were adopted to detect
intrusion in ADFA-LD dataset by the reviewed studies.
ADFA-WD and ADFA-WD:SAA (2016):
These datasets are based on Windows OS, which contain
syscall traces from Windows XP SP2 system. While ADFA-
WD includes zero-day attacks based on vulnerabilities, ADFA-
WD:SAA is created to evaluate the effectiveness of HIDS against
stealth attacks. In ADFA-WD, automated hacking tools were
used to exploit 12 known vulnerabilities and the attack vectors
include browser attack and malware attachment. ADFA-WD
includes 355 normal training syscall sequences, 5542 attacks and
1827 normal validation syscall sequences. In contrast, ADFA-
WD:SAA includes 862 attack syscall traces. Since both of these
syscall-based HIDS datasets are the sequence of tokens, NLP
methods are well-suited to handle these datasets [S12].

6.2.4. Private simulated datasets

In this section, we discuss the simulated datasets, which are
not publicly available. To create private simulated datasets,
researchers have used various libraries or tools (e.g., Strace
[S24], LT!Tng [S24]), which allow monitoring the execution
of a program and read syscall traces on user or kernel space.
Ptrace helps to trace Linux syscall. Besides, Strace open-source
application utilizes ptrace to provide statistics about a trace in
text format. Linux Trace Toolkit Next Generation (LTTng) tracer

saves traces in Common Trace Format (CTF) (Desnoyers and|

2006). Further, drstrace helps to trace syscall for
Windows OS. A study [S10], used drstrace to append syscall

with AWSCTD dataset.

A study [S24] created a dataset based on a local Linux OS,
where normal syscall traces were collected by several tasks (e.g.,
web browsing and document processing). For collecting at-
tack syscall traces, Metasploit open source
penetration testing tool was utilized to exploit the popular vulner-
abilities for executing the attacks. Another study [S33] created a
dataset by simulating attacks in a controlled environment on a


private Ethernet-based local network (includes 2 desktops and
an IBM ES750 Network Scanner). This dataset enabled the
study to evaluate the reasoning logic of semantic ontology on
multiple diverse vulnerabilities. The reasoning logics of the
semantic ontology were used to analyze the text description of
the vulnerabilities and then use them to detect the possibility of
attacks in logs, which successfully inferred 7120 of the 8070
attacks.

6.2.5. Private real datasets

A study [S32] created a dataset by collecting the normal
samples from a corporate network border’s live feeds of all the
files, which were filtered using anti-virus scanners to ensure
them as benign data. Attack data was collected from the daily
feed of a security company which gathers malicious software
from their network sensors. Another study [S36] gathered
various real-world exploits and legitimate applications and
confronted them on a Windows 7 host. The studies [S13, S26]
that intend to perform knowledge fusion by semantic ontology
built their own dataset by collecting data from varied dynamic
textual sources (e.g., Symantec’s website [2018))
and combining them with malware behavioral information to
detect attacks. While a study [S39] collected syscall sequences
on the process of sending and receiving e-mails, another
study [S34] focused on Gzip software (a file compression and
decompression tool for Linux) to collect data.

To summarize RQ2.2, we identified ADFA-LD (Creech and|
arenes UNM and ADFA-WD
2013a), are widely adopted to develop and evaluate NLP-
based HIDS in practice. However, these widely adopted datasets
are old to represent modern complex attacks and have only ba-
sic information (e.g., syscall identification and called function
names), which is minimal to detect intricate and modern security
attacks in the host [S10]. Besides, an inadequate number of
vulnerabilities were utilized to generate attacks [S10] in these
datasets. To reflect the modern host systems’ behavior and at-
tacks in the host, our SLR identified several recent and extended
datasets, such as AWSCTD (Ceponis and Goranin 2018) dataset
for Windows OS, and NGIDS-DS (Haider et al.|/2017), LID-DS
and PLAID [S21] datasets for Linux
OS. Moreover, we observed several datasets used to develop
and evaluate NLP-based HIDS in practice are private, which can
hinder the reproducibility and replicability of the NLP-based
HIDS.

6.3. RQ2.3: Evaluation Metrics

We identified 17 evaluation metrics that have been used to
evaluate the performance of NLP-based HIDS. Several reviewed
studies perform an intermediary step (i.e., syscall sequence pre-
diction) and then perform the intrusion detection to enhance
the detection capabilities. These studies evaluate both steps
with distinguished evaluation metrics. Besides, the computation
performance (efficiency) is also measured along with the detec-
tion performance (i.e., effectiveness). Hence, we categorized
the evaluation metrics into three categories such as detection

21

performance (Section|6.3.1), computation performance (Section
6.3.2) and intermediary task performance (Section|6.3.3). Table
presents the metrics of each category with their description,
mathematical representation and corresponding strengths and
weaknesses. This comparative analysis of Table [12] will help
HIDS researchers to choose suitable metrics to evaluate the pro-
posed HIDS. Besides, Table[12] will help the HIDS developers
to reflect the organization’s requirements and preferences by
evaluating the HIDS based on the relevant metrics. The study
mapping with the metrics is available in Table A.3 of our online

appendix (Zarrin Tasnim Sworna and Babar}|2022).

6.3.1. Detection performance

12 evaluation metrics have been used to validate the detection
result by the reviewed HIDS studies which used NLP methods.
As shown in Table[12| the mathematical representation of these
evaluation metrics includes any of True Positive (TP), False Pos-
itive (FP), True Negative (TN) or False Negative (FN) value of
confusion matrix (Jiao and Du] {2016). While confusion matrix
holds the relevant nominal value instead of normalized values, it
is usually used to calculate other metrics (e.g., recall). Detect-
ing all the attacks at a cost of false alarms is highly significant,
whereas handling a huge volume of false alarms of a HIDS is
time consuming and costly for security analysts. Hence, HIDS
usually intends to maximize the attack Detection Rate (DR)
and minimize the False Alarm Rate (FAR), which are the top
2 most used metrics in the reviewed NLP-based HIDS literature.
In the HIDS domain, DR, recall and True Positive Rate (TPR)
are referred to as the same. Besides, FAR and False Positive

Rate (FPR) are considered as the same 2018).

While optimized precision reveals that all the predicted
alarms are worth noticing, F-measure combines both precision
and recall {Gamage and Samarabandu] (2020). F-measure is a
better metric for the highly imbalanced HIDS dataset. However,
precision, recall and F-measure do not consider TN. Besides,
considering the cost of the inability to detect an attack by the
HIDS model is high, False Negative Rate (FNR) denotes the
missed attacks. Further, a high True Negative Rate(TNR) de-
notes that the HIDS is usually correct to predict benign behavior.
Since the output of the HIDS model is discrete, classification
error and Mean Error Rate (MER) are suitable to represent
the error of the HIDS model. FNR, TNR, classification error or
MER can be used as auxiliary metrics with other metrics (e.g.,
DR, FAR) (Czakon| 2022).

The other two highly used metrics in the reviewed NLP-based
HIDS literature are ROC-AUC and accuracy. Compared to
accuracy, AUC based on the ROC curve (ROC-AUC) provides a
more robust measure for the evaluation of HIDS derived from
imbalanced datasets as accuracy can be dominated by the ma-
jority benign class in HIDS. However, if the dataset is highly
imbalanced, the shape of the ROC-AUC curve can be misleading
[20 16). Thus, Matthews Correlation Coefficient

(MCC) can be used, which is considered one of the best-balanced

evaluation measures (Jiao and Duj\|2016). Unfortunately, only
one study [S4] used MCC.


Table 12: Metrics used for evaluation of NLP-based HIDS and their description, equation, strengths and weaknesses

Evaluation Paper
Metric Description Equation Count Strengths Weaknesses
Detection Performance (Effectiveness)
Detection Rate Ratio of correctly identified attacks Thon 45 Prioritizes detecting all the attacks even at Do not consider TN (Use
(Recall, detec- —_ out of total attack samples. a cost of false alarm. Considering it is less | of MCC can resolve
tion accuracy, costly to process all the alerts compared to __ this).
TPR) missing to detect an attack, recall can be help-
ful.
Precision Ratio of the correctly identified at- Tha 13 Considering that handling false alarms is
tacks to total samples identified as costly, optimized precision reveals that all
attacks. the predicted alarms are worth noticing.
F-Measure Harmonic mean of precision and re- 2XPXR 15 Combines precision and recall. Suitable for
call. highly imbalanced HIDS dataset.
False Alarm Ratio of incorrectly detected normal Thay 40 Given that the cost of dealing with a huge —_ Should be used as an aux-
Rate (FAR, — samples out of total normal samples. volume of alerts of a HIDS is high, itis an _iliary metric with other
false positive important metric for HIDS. metrics.
rate, FPR)
False Negative Ratio of incorrectly detected attacks 7 8 Given that the cost of the inability to de-
Rate (Missing __ out of total attack samples. tect an attack by the HIDS model is high,
Rate, FNR) it presents the missed attacks.
True Negative Ratio of correctly identified normal Thee 4 To represent that the HIDS is usually correct
Rate (TNR) samples out of total normal samples. to predict a benign behavior, it can be used.
Confusion ma- Matrix of prediction results. - 3 Presents nominal value rather than normal- Rather than using it as
trix ized value to show how the HIDS model per- a metric, the matrix is
forms for different imbalance classes. Gives _ usually used to calculate
insight into the type of error made by the _ other metrics (e.g., preci-
HIDS. sion).
AUC based on ROC curve shows the TPR asafunc-  - 33 Not dependent on prediction threshold. Not suitable for heavily
ROC Curve _ tion of FPR as the discrimination imbalanced HIDS data
(ROC-AUC) threshold of the classifier is varied, (Use of Precision-recall-
and AUC is the area under ROC. AUC can resolve this).
Classification Percentage of correctly classified ee es 18 Consider all the cells of a confusion matrix. | Not suitable for imbal-
Acc/Rate samples. anced data.
Classification Percentage of incorrectly classified PEN 1 Suitable to represent the error of the HIDS Can be used as an aux-
Error samples. model as the HIDS output is discrete. iliary metric with other
metrics.
Mean error Average error rate of FPR and FNR. —avg(FPR,FNR) 1
rate (MER)
Matthews Cor- Classifications quality measure, ro-  7?X7N—FPxFN a HEX 1 Suitable for imbalanced data. Unlike preci- | MCC is yet to be widely

relation Coeffi-

bust to highly imbalanced data. Here,

sion, recall and f-measure, MCC considers

adopted by the HIDS lit-

cient (MCC) x=(TP+FP)(TP+FN)(TN+FP)(TN+FN) TN erature.
Computation Performance (Efficiency)
Time Training time/ testing time/ execu-- 15 Presents the applicability of the HIDS in HIDS efficiency should
tion time a real industry setting in terms of required _ be used along with effec-
time. tiveness metrics.
Performance of Intermediary Task of Sequence Prediction
BLEU score Compares a predicted syscall se- brevity 3 Can be used when there is more than Focus on statistical sim-
quence to a target sequence. penaltyx geometric one ground truth sequence. Language- _ ilarities, they can not en-
avg of precision independent which makes it straightforward sure if the syscall se-
score to apply to HIDS models. quence makes sense to
the OS.
TF-IDF TF-IDF rises in proportion to the TFij x log ay 2 Language-independent making it straightfor-
word (i) freq in a document (j), butis  7'F;,;=freq of i in ward to apply to HIDS models.
offset by the number of documents j, N= doc count,
in the corpus that include the word. df;= num of doc
containing i
Cosine Simi- Cosine of the angle between two vec- sy 2 Performs correlation analysis of the predicted Differences in values are

larity

tors (x, y) to determine if they are in
the same direction.

Ihlibytl

and target sequence to ensure if the syscall
sequence makes sense to the OS.

not fully considered.

22


Open Challenges and Future Directions

y
Lack of updated, complete,

balanced and diverse datasets extraction

_ v
Difficulty in effective feature

¥
| Difficulty in real-world
applicability of HIDS

1. Use of updated and complete

dataset for NLP-based HIDS feature extraction

1. Use of NLP-based automated

. Use of DL-based NLP methods for HIDS

2. Use of NLP-based data augmentation
3. Consideration of diverse data

feature selection

2. Consideration of automated

. Need for green-Al inspired resource efficient NLP-based HIDS
Need for real-time attack detection

Need for using transfer learning for HIDS using NLP

. Use of incremental learning for NLP-based HIDS

. Need for developing resilient HIDS model

. Need for enhancing NLP-based HIDS model interpretability
. Need for integration and orchestration of HIDS in SOC

00]N |o fon] Joo Jno [=

Figure 5: Open Research Challenges and Future Research Directions

6.3.2. Computation performance

The computation performance of NLP-based HIDS is mea-
sured by time in the reviewed HIDS studies. To evaluate the
required time, the reviewed studies reported training time, test-
ing time or execution time. Given the complex structure of DL
models (e.g., Seq2Se language modeling), it requires more time
and memory even though it provides a high detection accuracy.
Unfortunately, only 4 studies [S4, $5, S22, S43] out of 24 studies
that use NLP-based DL models have reported time. Furthermore,
resource utilization refers to the storage or resource usage (e.g.,
the size of the stored HIDS model such as learned rules or mem-
ory required for training a HIDS model). Evaluation of HIDS in
terms of both time and resource utilization is significant to prove
the applicability and deployment of the proposed NLP-based
HIDS in a real industry setting. Unfortunately, none of the re-
viewed studies reported the resource utilization of the proposed
HIDS using NLP methods.

6.3.3. Performance of intermediary task of syscall sequence
prediction

A set of studies performed an intermediary task of syscall
sequence prediction before performing the detection. To
monitor a system state and predict an attack behavior, syscall
sequence prediction is performed. The use of the predicted
sequence as supplementary information with the invoked
sequence for the detection classifier significantly improved
the HIDS performance [S43, S63]. As the performance of
HIDS strongly relies on the performance of such intermediary
tasks [S44], various metrics have been used to evaluate these
intermediary tasks as shown in Table [12] with relevant details.
Bilingual Evaluation Understudy Score (BLUE) [S5, S44,
$63] is a benchmark widely utilized in NLP. BLUE Score
compares a predicted syscall sequence to a target syscall
sequence. The values approaching | in the [0, 1] range
indicate that the predicted sequence is nearly identical to the
target sequence. Another metric is Term Frequency-Inverse
Document Frequency Score (TD-IDF) [S44, S63], where
the value rises in direct proportion to the frequency of a word
in a document, but is offset by the number of documents in
the corpus that include the word. Since BLUE and TF-IDF
both focus on statistical similarities, they can not ensure if
the semantics of the sequence is preserved. Thus, to mitigate
this issue, Cosine Similarity Score [S44, S63] is used as well,

23

which performs correlation analysis of the predicted and target
sequence.

To summarize RQ2.3, DR and FAR are the most used met-
rics in the reviewed NLP-based HIDS literature as HIDS usually
intends to maximize the attack DR and minimize the FAR in
terms of evaluating detection performance. To justify the ap-
plicability of the proposed NLP-based HIDS in real industrial
settings, several studies reported the required time in terms of
computation performance. However, none of the studies re-
ported the required resource utilization for the NLP-based HIDS.
Further, in terms of the performance of intermediary task of
syscall sequence prediction, BLUE, TD-IDF and Cosine Sim-
ilarity are used together to evaluate if the predicted syscall is
both syntactically and semantically correct [S44, $63].

7. Open Research Challenges and Future Directions

We discuss three critical challenges such as lack of updated,
complete, balanced and diverse datasets (Section 7.1), difficulty
in effective feature extraction (Section 7.2) and difficulty in
real-world applicability (Section 7.3) of NLP-based HIDS. We
present 13 potential research directions to address such chal-
lenges. Challenges and potential research directions are graphi-
cally summarized in Figure[}| We expect Figure[5|will benefit
practitioners and researchers to get an overview of the open
challenges and potential solutions in this domain.

7.1. Lack of Updated, Complete, Balanced and Diverse
Datasets

In this section, we present the main issues with the datasets
used by the reviewed NLP-based HIDS studies and their poten-
tial research directions.

7.1.1. Use of updated and complete dataset for NLP-based
HIDS

The applications, OS and their syscall change rapidly over
time with the changing threat landscape, which make outdated
datasets less effective for evaluating modern HIDS
2017). Hence, the HIDS
datasets should be kept up-to-date. Yet most of the public
datasets are outdated (e.g., the top 3 most used datasets in our
review ADFA-LD, UNM and ADFA-WD are almost a decade


old). Thus, we recommend to releasing new versions of the
existing datasets for handling the concept drift issue [S58] and
modern attack scenarios.

Furthermore, most of the current IT systems are multi-
threaded, still, the available public datasets are not complete
as they lack thread information and textual metadata. Thread in-
formation and textual metadata are highly important and promis-
ing indicators for HIDS (Maggi et al.| {2008} /Mutz et al.| [2006).
For example, ADFA-LD lacks metadata (e.g., parameter, return
value) and NGIDS-DS lacks both parameters and more accu-
rate timestamps. Considering only the temporal order of syscall
can be susceptible to mimicry attack. This attack can be pre-
vented by combining other system artifacts [S41] (e.g., syscall
arguments, function calls and other user-space information). To
address these issues, LID-DS dataset
was developed, which is the first HIDS dataset containing syscall
and their timestamps, thread id and diverse metadata of several
recent, multi-process and multi-threaded scenarios. Hence, we
suggest including the newly available and more complete HIDS
datasets for HIDS evaluation rather than using only the decade-
old dataset.

The recommended dataset to be added with the widely
adopted ADFA family datasets for evaluation of HIDS is
AWSCTD for Windows OS, while NGIDS-DS, LID-DS and
PLAID are recommended for Linux OS, as they are more ex-
tended and recent datasets that reflects modern host systems and
modern attacks.

7.1.2. Use of NLP-based data augmentation

A HIDS prediction model can be biased towards the majority
benign class in the commonly used imbalanced datasets. This
bias significantly affects the frequently used supervised learning-
based HIDS performance. We observe that only 3 out of 25 stud-
ies that used supervised learning approach attempted to balance
the datasets. These 3 studies proved their effectiveness using
diverse methods such as oversampling (SMOTE [S40]), generat-
ing malicious samples (GAN [S48], NLP-based SeqGAN and
Seq2Seq [S45]). The NLP-based research trend that is gaining
popularity from 2019 is various text augmentation approaches
(e.g., swap or delete word, and word insertion or replacement
based on contextual similar word and word occurrence statis-

tics) (Niederhut] [2020}|Mal [2019 2019). A set of
studies 2022 2020} |[Kobayashil |2018)

present the effectiveness of text augmentation in different clas-
sifiers, NLP language model and NLP-based prediction model.
These augmentation techniques can be investigated to address
the data imbalance problem for NLP-based HIDS.

7.1.3. Consideration of diverse datasets

We observe that most studies used only a single dataset (e.g.,
ADFA-LD (used in 31 studies) and UNM (used in 6 stud-
ies)), while only 16 out of 65 studies used multiple datasets
for the training and evaluation of HIDS. We recommend us-
ing diverse datasets as it will enable the NLP-based HIDS to
be platform-independent. It will also improve detection ca-
pability and prove the scalability of the NLP-based HIDS in
real-life. Firstly, the use of datasets from different OS makes it

24

platform-independent. For example, ADFA-LD, NGIDS-DS are
Linux-based and ADFA-WD is from Windows OS. Besides, the
use of multiple datasets in the existing studies (e.g., [S44, S49])
would have helped to prove the generalizability of the proposed
NLP-based HIDS solution. We recommend NLP-based methods
as the NLP-based semantic approach provides high-level porta-
bility between diverse OS [S30]. Secondly, the use of large-scale
datasets is recommended to represent the real-world scenario to
ensure scalability without compromising accuracy.

7.2. Difficulty in Effective Feature Extraction

Training HIDS model using only benign data makes the fea-
ture extraction more challenging to find the discriminative fea-
tures due to the lack of attack data. Besides, manual feature
extraction hinders reliable and adaptable feature extraction of
HIDS for the changing threat landscape. We discuss the potential
research directions to mitigate these challenges.

7.2.1. Use of NLP-based automated feature extraction

The real world adoption of HIDS deals with an enormous
amount of continuous data with a rapidly changing threat land-
scape. So, manually extracted features may become outdated due
to feature drift (Barddal et al.|/2017), and can be easily evaded by
attackers. A few studies adopted NLP-based automated feature
extraction (e.g., CNN and LSTM-based contextual features) and
the use of multi-level feature extraction (e.g., CNN-LSTM) from
syscall sequences. However, to extract more effective features
for HIDS performance improvement, there is still a demand for
taking advantage of recent more sophisticated NLP techniques
in HIDS. The advanced NLP techniques such as the use of more
feature learning layers using Very Deep Convolutional Neural

Networks VDCNN 2016), use of contextual

word embedding techniques (e.g., Bidirectional Encoder Repre-

sentations from Transformers (BERT) (Devlin et al.|/2018)) and

deep contextual embedding (e.g., Embeddings from Language
Models (ELMo) (Peters et al.|[2018)) are yet to be explored in
HIDS. Since the use of advanced NLP techniques presents a
huge opportunity for feature extraction from continuous data,
we recommend that HIDS researchers should focus on reliable
and adaptable automated NLP-based feature extraction methods
to handle rapidly changing threat landscape.

7.2.2. Consideration of automated feature selection

To reduce dimensionality, computation time and overfitting;
while improving ML model interpretability and prediction ac-
curacy, automated feature selection is highly recommended
(Brindha and Shaji|{2015). Only a few studies explicitly men-
tioned their feature selection method, where the most used
methods (e.g., frequency-based, Principle Component Analysis
(PCA)) require manual threshold selection. However, a newer
NLP-based approach used in DL models is attention mechanism
that can mitigate this limitation, which is adopted by only 4
reviewed studies [S44, S45, S62, S63]. We suggest the use of an
NLP-based attention mechanism combined with automated fea-
ture extraction to discover more prominent and relevant features
from HIDS data.


7.3. Difficulty in Real-World HIDS Applicability

We propose the following research directions to mitigate the
difficulty of ensuring real world applicability of HIDS.

7.3.1. Use of DL-based NLP methods for HIDS

To improve accuracy and reduce FAR for real world applica-
bility of HIDS, further exploration of DL-based NLP methods
is recommended. Though TCN is an outstanding alternative
to recurrent architecture, it has been used only in 1 study [S8].
Besides, NN with more hidden layers usually provides better
performance (Conneau et al.|/2016), so we recommend explor-
ing the deeper versions of CNN, RNN and TCN performance
in HIDS. Moreover, the recent practice is to utilize ensemble
DL models as it usually outperforms the base models. However,
only 3 studies ([S4], [S15], [S46]) used an ensemble of CNN
and RNN. Thus, we recommend further focusing on ensembling
TCN with other models (e.g., 1D CNN, BiGRU) to explore if it
can outperform even deeper versions of CNN, RNN and TCN for
HIDS. Moreover, to perform supervised learning using limited
annotation data for improved DR and lower FAR, we recom-
mend exploring the effectiveness of using NLP-based low-shot

learning or few-shot learning 2020) in HIDS domain.

7.3.2. Need for green-Al inspired resource efficient NLP-
based HIDS

The adoption of DL model-based NLP method gained pop-

ularity in HIDS from 2018 with great improvements in accu-

racy. However, DL models in NLP are both environmentally

unfriendly and prohibitively expensive, which is denoted as “Red

AT” (Strubell et al.}/2019). The required amount of computing

resources used to train DL models had increased 300,000-fold
from 2012 to 2019 (Strubell et al.|/2019). The necessary com-
putation power of a single DL model in NLP emits 626,000
tonnes CO>, which is five times more than an average car emits
throughout its lifetime (Strubell et al.|/2019). Hence, “Green AI”
(Strubell et al. is encouraged, which considers efficiency
as the primary assessment criterion along with effectiveness. Be-
sides, Calero and Piattini emphasized
that organizations prefer sustainability-based designs (i.e., use
of fewer resources for acquiring outcome) in industrial software
designs for extensive cost cutting opportunities. Unfortunately,
none of the reviewed studies focused on or even reported the
required resources (e.g., model size, CPU core hours, disk read
and disk write) for the NLP-based HIDS. Hence, we recommend
the researchers evaluate and optimize the required resource con-
sumption to ensure the NLP-based HIDS model’s applicability
as a resource efficient solution in real industrial settings.

7.3.3. Need for real-time attack detection

An organization may fall victim to attacks every 40 seconds
(Embroker| |2021), which demands for real-time attack detection
by HIDS. However, only 15 out of 65 studies used the time
metric for the NLP-based HIDS evaluation. While the reviewed
studies gained high accuracy by applying DL model-based NLP
method, they incurred a long training time. For example, a study
[S43] using LSTM+VED required 6h 45min and another study

25

[S5] using LSTM and GRU required 50.03min and 43.53min,
respectively. To mitigate the requirement of high time issue,
we recommend the following methods. Firstly, for syscall se-
quence data, the use of CNN approaches is more time-efficient as
RNN-based (LSTM or GRU) methods encode the input tokens
sequentially and operations in RNN-based network structures
can not be parallelized, which results in low-efficiency
(2019). Secondly, we recommend using hardware
support like GPU to improve the HIDS time efficiency. For
example, researchers can explore to improve time efficiency of
HIDS based on CNN methods using GPU support
2010} {Song et al.|/2017). Thirdly, HIDS deployed in the industry
has to deal with a huge volume of data (e.g., | trillion security
events are generated by HP per day (Cardenas et al.||2013)).
Thus, we highly recommend using big
technologies (e.g., Spark, Kafka and Hadoop) for highly scalable
HIDS data processing for real-time attack detection.

7.3.4. Need for using transfer learning for HIDS using NLP

Transfer learning is a method that aims to enhance the tar-
get domain model’s performance by transferring the knowledge
which is achieved from a relevant source domain model. Trans-
fer learning reduces the need of a huge amount of target domain
data to build a target domain model. Developing individual
HIDS with good performance for each computing infrastructure
and attack type is difficult, as collecting labeled data and training
HIDS from scratch is highly expensive. This issue can be miti-
gated by transfer learning, which saves training time, resources
and improves performance. For example, a study [S12] used
transfer learning for improved attack detection performance for
a target domain (commonly a domain with little data) utilizing
support from a source domain (commonly a domain with huge
data). The use of transfer learning by adopting large-scale pre-
trained language models
is a prevalent recent trend in NLP and SE, as it helps to learn
universal representation, provides better model initialization for
generalization and provides regularization for avoiding over-
fitting on a small dataset. Hence, we highly recommend that
HIDS researchers explore the creation of diverse pre-trained
models and make the models publicly available so that other
researchers and developers can adopt these pre-trained models
to avail the advantages of transfer learning.

7.3.5. Use of incremental learning for NLP-based HIDS

To keep pace with the rapidly changing threat landscape and
to mitigate the concept drift issue, incremental learning-based
HIDS is recommended. Incremental learning is required for the
HIDS model to be frequently updated and continuously adapted
to new types of attacks and new data with varying character-
istics over time. Incremental learning uses the
previous knowledge and updates the model based on the newly
available data reducing the memory requirement and time com-
plexity. Only two of our reviewed studies [S16, S59] adopted
incremental learning. In contrast, most of the studies usually
use the traditional static batch-retraining method. This method
is both time consuming and resource intensive as it discards the
previously trained model and trains a new model from scratch on


a new dataset including original and new instances. Hence, in ac-
cordance with an existing study (Mahoney and Chan||2003), we
emphasize the serious demand for exploring efficient incremen-
tal learning algorithms for NLP-based HIDS to address concept
drift issues.

7.3.6. Need for developing resilient HIDS model

The real world deployment of HIDS is susceptible to adver-
sarial attacks. For example, mimicry attack based on syscall
temporal order, attacker predicting the alarm generation thresh-
old to keep attack undetected and evasion attacks [S41]. Ad-
versarial attacks strive to evade, undermine or mislead HIDS
capabilities. However, only 5 [S30, S35, S41, $42, S59] studies
focused on resilient HIDS against adversarial attacks, while 3
studies considered it as future work. A study [S30] showed that
the use of NLP-based semantic method inherently makes the
HIDS resilient to mimicry attacks. Given the recent prevalence
of adversarial attacks targeting models in the cyber security
domain, we highly recommend considering the adversarial re-
silience of the HIDS by adopting methods such as randomness,
sanitizing data, adversarial training and using semantic methods

(Rosenberg et al.)/2021).

7.3.7. Need for enhancing NLP-based HIDS model inter-
pretability

HIDS model interpretability raises the transparency of at-
tack predictions, which helps the developers to efficiently debug
and refine the model or data for improved performance
limparmpas et al.|/2020). Only a few studies (e.g., [S16, $62])
presented the important features and reasoning of the NLP-based
HIDS model’s prediction result. HIDS researchers can be moti-

vated by the interpretable NIDS research area (Mane and Rao|

2021 2020 2018). Thus, we recom-
mend exploring the applicability of the HIDS interpretability

in terms of (1) model-based interpretability (creates a model
that is interpretable by nature) and (2) post hoc (applies an inter-
pretability approach after training a black box model)
fet al.|[2019). The NLP approaches such as locating significant
n-grams in sentences based on the intermediate outputs of CNN

can provide interpretability (Huang et al.||2018) that can be
adopted in NLP-based HIDS.

7.3.8. Need for integration and orchestration of HIDS in
SOC

Security Operation Center (SOC) of an organization uses 76

security tools on average 2021) including HIDS.

Even the use of multiple HIDS to protect different hosts is a
common practice in SOC (2001). Hence, HIDS
should be able to collect and process data from diverse tools.
For example, MISP (Malware Information sharing Platform)
shares cyber security indicators to be integrated
with HIDS. Further, the never-ending flow of alerts generated by
HIDS tools need to be correlated by Security and Information
Management (SIEM) system or Security Orchestration, Automa-
tion and Response (SOAR) Platform. For example, a SIEM tool

named Splunk (Splunk! |2021) enables to search, analyze and
visualize the alerts gathered from tools (e.g., HIDS) of the SOC.

26

Hence, data interpretability and interoperability of HIDS tools is
a key requirement to ensure the integration and orchestration
of HIDS in a SOC, which has not been focused
on in the reviewed studies. Recently, only 3 studies [S13, S26,
$33] utilized semantic ontology for intrusion detection by inte-
grating IDS/IPS sensor information (e.g., HIDS, NIDS), sensor
data streams, malware data (Symantec’s website), web text data,
and domain expert knowledge. To mitigate the gap between
academia and industry, we recommend that HIDS researchers
should focus on the existing tools and techniques available in
the industry and propose methods to integrate them with the
proposed HIDS in SOC scenario. This leads to the following
future research directions. Firstly, we recommend comparative
evaluation of proposed HIDS with existing HIDS tools (e.g.,
open-source WAZUH or OSSEC [2022)). Secondly,
we recommend incorporating the available updated threat intel-
ligence data sources to HIDS for attack detection and ensuring
the HIDS alerts/output to be interpretable by the SIEM or SOAR
tools for smooth integration and orchestration of proposed HIDS
in real SOC scenarios. Further, we suggest that semantic ontol-
ogy and reasoning can be explored to integrate and orchestrate

(Islam et al.|!2019) HIDS with other security tools, which will

validate the use of the proposed HIDS in the real SOC scenario.

8. Threats to Validity

We carefully followed the widely adopted SLR guidelines
to design and conduct our SLR.
We adopted suitable steps to mitigate the effects of identified
threats to validity of this SLR as presented below:

Search Strategy: Missing some relevant studies is a common
threat to an SLR. To minimize this effect, we used Scopus (the
most comprehensive search engine with the largest indexing sys-

tem (Croft et al.||2021)) and complemented it with the two most
frequently used digital libraries, IEEE Xplore and ACM Digital

Library (2020). Moreover, we ran a series of pilot
searches to find a suitable search string to ensure the retrieval
of the relevant papers. Besides, both forward and backward
snowballing techniques were conducted to find other relevant
papers that are overlooked by the search string.

Selection process: The study selection process may be af-
fected by the authors’ subjective judgment. To mitigate this
threat, we performed a multi-step process (Section 3.3) with
clearly specified inclusion-exclusion criteria to select the rele-
vant studies. We also defined specific quality assessment criteria
to exclude low-quality papers. At each step of the selection
process, we discussed and resolved ambiguities to minimize the
selection bias.

Data Extraction and Synthesize: Results and findings may be
influenced by human error and author bias in data extraction,
data analysis and data interpretation. To address this issue, a data
extraction form was created and iteratively improved to collect
sufficient and consistent information required to answer the
RQs. Besides, all the data-extraction activities, data synthesizing
and interpretation of our quantitative and qualitative analysis
were cross-checked by the authors. All the disagreements were
discussed and resolved through discussions.


9, Conclusion

This paper presents an SLR aimed at systematically and rig-
orously selecting and analyzing the existing literature on NLP-
based HIDS. The findings are expected to form an evidence-
based body of knowledge of taxonomic analysis of the NLP
methods, attacks, datasets and evaluation metrics used in NLP-
based HIDS for practical use in the industrial setting. We syn-
thesized 65 papers from the last decade on NLP-based HIDS.
We categorized and compared the NLP-based HIDS solutions,
datasets and evaluation metrics to help developers select a suit-
able type for a specific HIDS application. We discussed the role
of NLP in HIDS and the impact of attacks that are detected by
NLP-based HIDS.

Our review aims to help researchers by providing an overview
of this burgeoning research landscape. The increasing number
of studies in NLP-based HIDS shows the significantly growing
attention among the research community as 42 papers were
published in the last 4 and a half years. Yet our review identified
crucial open issues and proposed a roadmap of future work to
help the researchers to mitigate those issues. The implications
for the researchers are as follows:

1. We recommend the researchers to focus on real-time ac-

curate HIDS development leveraging the latest NLP tech-
niques (e.g., text augmentation, NLP-based low-shot learn-
ing). Besides, researchers should focus on adopting incre-
mental learning, enhancing HIDS model interpretability
with robustness to adversarial attacks using NLP. Moreover,
researchers should focus on semantic integration of HIDS
in SOC.
. We encourage the researchers to adopt NLP-based trans-
fer learning using pre-trained HIDS models as it helps to
learn universal representation, provides better model initial-
ization for generalization and provides regularization for
avoiding over-fitting on small HIDS dataset.
Our findings advocate the demand for further research in
DL-based NLP methods for developing HIDS as the recent
practice of adopting DL-based NLP approaches showed sig-
nificantly better performance compared to the prevalently
used traditional ML and rule based approaches.
. We recommend the researchers to get inspired by green-AI
and focus on time and resource efficiency of the proposed
NLP-based HIDS along with effectiveness to provide cost
cutting opportunities for real industrial adoption.
We encourage the researchers to make their dataset pub-
licly available as 8 studies used private datasets, where the
inaccessibility to the dataset hinders research advancement.
. We recommend researchers to use MCC, which 1s a suitable
metric for the most used HIDS imbalanced datasets.
. Our comprehensive taxonomy is expected to help re-
searchers to frame future research in this domain.

Our findings are expected to help practitioners potentially
utilize the NLP methods as we highlight the existing prevalent
practices and considerations in NLP-based HIDS. The implica-
tions for the practitioners are as follows:

1. Practitioners can make well-informed decisions while de-

veloping a HIDS based on our critically reviewed end-to-

27

end pipeline of NLP-based HIDS. We identified, catego-
rized and highlighted the strengths and weaknesses of each
of the categories for the used NLP methods, key factors to
consider while developing HIDS, datasets and evaluation
metrics.

For securing critical infrastructure, we suggest the practi-
tioners adopt the big data frameworks and sophisticated
hardware support such as GPU for real-time detection by
HIDS.

Our findings guide the practitioners by providing the preva-
lent practices such as the dominant use of semi-supervised
learning approach due to the lack of balanced datasets and
the use of anomaly-based approach to detect unknown at-
tacks (e.g., zero-day attack). We recommend that practi-
tioners use hybrid approaches to gain the benefit of both
signature and anomaly-based detection approaches.

We recommend the practitioners to train and validate the
HIDS model with their industry-specific data before the de-
ployment of the target HIDS, as our review found that most
studies used public datasets, which are mostly outdated and
lack sufficient and diverse attack instances.

We encourage the practitioners to analyze the trade-off
between detection performance and computation perfor-
mance (i.e., required time and resource) while choosing
a HIDS model to achieve maximum detection rate with
a lower false alarm rate at minimum processing time and
cost. Unfortunately, most of the studies did not report time
and resource utilization, which questions the applicability
of the proposed NLP-based HIDS in the industrial setting.
Besides, we encourage the practitioners to frequently share
their experiences and the recent attacks’ details encoun-
tered in real industrial settings, which can help to mitigate
the gap between academic research and industrial demand.
Practitioners sharing the attack signature will help to store
the up-to-date signature for signature-based detection and
will help to evaluate the anomaly-based models’ capability
to detect new attacks.

Acknowledgement

The work has been supported by the Cyber Security Research
Centre Limited whose activities are partially funded by the Aus-
tralian Government’s Cooperative Research Centres Programme.

10. Appendix

10.1. List of Selected Papers

S1 Z. Liu, N. Japkowicz, R. Wang, Y. Cai, D. Tang, & X. Cai, “A
statistical pattern based feature extraction method on system call
traces for anomaly detection”, Information and Software Technol-
ogy, 2020.

S2_ Y. Shin, & K. Kim, “Comparison of anomaly detection accuracy
of host-based intrusion detection systems based on different ma-
chine learning algorithms”, International Journal of Advanced

Computer Science and Applications, 2020.


$3

S4

$5

S6

S7

S8

S9

$10

S11

$12

$13

$14

S15

S16

$17

S18

X. Zhang, Q. Niyaz, F. Jahan, & W. Sun, “Early Detection of
Host-based Intrusions in Linux Environment’, IEEE International
Conference on Electro Information Technology, 2020.

D. Ceponis, & N. Goranin, “Investigation of dual-flow deep learn-
ing models LSTM-FCN and GRU-FCN efficiency against single-
flow CNN models for the host-based intrusion and malware de-
tection task on univariate times series data”, Applied Sciences,
2020.

L. Bouzar-Benlabiod, S. H. Rubin, K. Belaidi, & N. E. Haddar,
“RNN-VED for Reducing False Positive Alerts in Host-based
Anomaly Detection Systems”, IEEE 21st International Confer-
ence on Information Reuse and Integration for Data Science,
2020.

B. Subba, & P. Gupta, “A tfidfvectorizer and singular value de-
composition based host intrusion detection system framework for
detecting anomalous system processes”, Computers & Security,
2021.

X. Liao, C. Wang, & W. Chen, “Anomaly Detection of System
Call Sequence Based on Dynamic Features and Relaxed-SVM”,
Security and Communication Networks Journal, 2022

N. Fu, N. Kamili, Y. Huang, & J. Shi, “A Novel Deep Intrusion
Detection Model Based On a Convolutional Neural Network”, .
Aust. J. Intell. Inf. Process. Syst., 2019.

M. Grimmer, T. Kaelble, & E. Rahm, “Improving Host-Based
Intrusion Detection Using Thread Information”, Communications
in Computer and Information Science, 2021.

D. Ceponis, & N. Goranin, “Evaluation of deep learning methods
efficiency for malicious and benign system calls classification on
the AWSCTD”, Security and Communication Networks, 2019.

S. Suratkar, F. Kazi, R. Gaikwad, A. Shete, R. Kabra, & S. Khir-
sagar, “Multi Hidden Markov Models for Improved Anomaly
Detection Using System Call Analysis”, IEEE Bombay Section
Signature Conference, 2019.

O. Ajayi, & A. Gangopadhyay, “DAHID: Domain adaptive host-
based intrusion detection”, [EEE International Conference on
Cyber Security and Resilience, 2021.

O. Can, M. O. Unallir, E. Sezer, O. Bursa, & B. Erdogdu, “A
semantic web enabled host intrusion detection system”, Interna-
tional Journal of Metadata, Semantics and Ontologies, 2018.

Y. Lu, & S. Teng., “Application of Sequence Embedding in Host-
based Intrusion Detection System”, IEEE 24th International Con-
ference on Computer Supported Cooperative Work in Design,
2021

A. Chawla, B. Lee, S. Fallon, & P. Jacob, “Host based intrusion
detection system with combined CNN/RNN model”, Joint Euro-
pean Conference on Machine Learning & Knowledge Discovery
in Databases, 2018.

P. F. Marteau, “Sequence covering for efficient host-based intru-
sion detection”, IEEE Transactions on Information Forensics and
Security, 2018.

N.N. Tran, R. Sarker, & J. Hu, “An approach for host-based intru-
sion detection system design using convolutional neural network”,
International conference on mobile networks and management,
2017.

F. J. Mora-Gimeno, H. Mora-Mora, B. Volckaert, & A. Atrey,
“Intrusion Detection System Based on Integrated System Calls
Graph and Neural Networks”. IEEE Access, 2021.

28

S19

$20

$21

$22

$23

$24

$25

$26

$27

$28

$29

$30

$31

$32

$33

$34

B. Subba, S. Biswas, & S. Karmakar, “Host based intrusion detec-

tion system using frequency analysis of n-gram terms”, TENCON
IEEE Region 10 Conference, 2017.

Z. Hu, L. Liu, H. Yu, & X. Yu, “Using Graph Representation in
Host-Based Intrusion Detection”, Security and Communication
Networks, 2021.

J.H. Ring, C.M. Van Oort, S. Durst, V. White, J.P. Near, & C.
Skalka, “Methods for Host-based Intrusion Detection with Deep
Learning”, Digital Threats: Research and Practice, 2021.

Y. Zhang, S. Luo, L. Pan, & H. Zhang, “Syscall-BSEM: Behav-
ioral semantics enhancement method of system call sequence
for high accurate and robust host intrusion detection”, Future
Generation Computer Systems, 2021.

S. S. Murtaza, W. Khreich, A. Hamou-Lhadj, & S. Gagnon, “A
trace abstraction approach for host-based anomaly detection”,
IEEE Symposium on Computational Intelligence for Security and
Defense Applications, 2015.

S. S. Murtaza, A. Hamou-Lhadj, W. Khreich, & M. Couture, “To-
tal ADS: Automated software anomaly detection system”, IEEE
14th International Working Conference on Source Code Analysis
and Manipulation, 2014.

M. B. L. M. Anandapriya, & B. Lakshmanan, “Anomaly based
host intrusion detection system using semantic based system call
patterns”, IEEE 9th International Conference on Intelligent Sys-
tems & Control, 2015.

S. N. Narayanan, A. Ganesan, K. Joshi, T. Oates, A. Joshi, & T.
Finin, “Early detection of cybersecurity threats using collaborative
cognition”, IEEE 4th international conference on collaboration
and internet computing, 2018.

K. H. Cha, & D.Ki. Kang, “Empirical analysis of effective mis-
use intrusion detection by trace classification using conditional
random fields”, Journal of Engineering and Applied Sciences,
2017.

M. Xie, J. Hu, X. Yu, & E. Chang, “Evaluating host-based
anomaly detection systems: Application of the frequency-based
algorithms to ADFA-LD”, International Conference on Network
& System Security, 2014.

M. Xie, J. Hu, & J. Slay, “Evaluating host-based anomaly de-
tection systems: Application of the one-class SVM algorithm to
ADFA-LD”, 11th International Conference on Fuzzy Systems &
Knowledge Discovery, 2014.

G. Creech, & J. Hu, “A semantic approach to host-based intrusion
detection systems using contiguousand discontiguous system call
patterns”, IEEE Transactions on Computers, 2013.

M. Xie, & J. Hu, “Evaluating host-based anomaly detection
systems: A preliminary analysis of adfa-ld”, 6th International
Congress on Image and Signal Processing, 2013.

A. Mustafa, M. Solaimani, L. Khan, K. Chiang, & J. Ingram,
“Host-based anomaly detection using learning techniques”, IEEE
13th International Conference on Data Mining Workshops, 2013.

S. More, M. Matthews, A. Joshi, & T. Finin, “A knowledge-based
approach to intrusion detection modeling”, IEEE Symposium on
Security and Privacy Workshops, 2012.

A. Sultana, A. Hamou-Lhadj, & M. Couture, “An improved hid-
den markov model for anomaly detection using frequent common
patterns”, IEEE International Conference on Communications,
2012.


$35

S36

$37

$38

$39

S40

S41

$42

$43

$44

S45

S46

S47

$48

S49

S50

S51

W. Khreich, S. S. Murtaza, A. Hamou-Lhadj, & C. Talhi, “Com-
bining heterogeneous anomaly detectors for improved software
security”, Journal of Systems and Software, 2018.

N. A. Milea, S. C. Khoo, D. Lo, & C. Pop, “Nort: Runtime
anomaly-based monitoring of malicious behavior for windows”,
International Conference on Runtime Verification, 2011.

G. Serpen, & E. Aghaei, “Host-based misuse intrusion detection
using PCA feature extraction and kNN classification algorithms”,
Intelligent Data Analysis, 2018.

T. H. Lee, H. Y. Huang, & C. Juang, “A high-performance deep
learning architecture for host-based intrusion detection system’,
IEEE REGION 10 CONFERENCE, 2020.

W. Wang, Z. Yang, & M. Zhang, “Intrusion Detection Technology
Based on Rough Set Attribute Reduction Theory”, International
Conference on Human Centered Computing, 2016.

E. Aghaei, & G. Serpen, “Ensemble classifier for misuse detec-
tion using N-gram feature vectors through operating system call
traces”, International Journal of Hybrid Intelligent Systems, 2017.

W. Khreich, B. Khosravifar, A. Hamou-Lhadj, & C. Talhi, “An
anomaly detection system based on variable N-gram features and
one-class SVM”, Information and Software Technology, 2017.

B. Borisaniya, & D. Patel, “Evaluation of modified vector space
representation using adfa-ld and adfa-wd datasets”, Journal of
Information Security, 2015.

L. Bouzar-Benlabiod, L. Méziani, S. H. Rubin, K. Belaidi, &
N. E. Haddar, “Variational encoder-decoder recurrent neural net-
work (VED-RNN) for anomaly prediction in a host environment’,
IEEE 20th International Conference on Information Reuse and
Integration for Data Science, 2019.

S. Lv, J. Wang, Y. Yang, & J. Liu, “Intrusion prediction with
system-call sequence-to-sequence model”, IEEE Access, 2018.

S. Shin, I. Lee, & C. Choi, “Anomaly dataset augmentation us-
ing the sequence generative models”, 18th IEEE International
Conference On Machine Learning And Applications, 2019.

N.N. Diep, N. T. T. Thuy, & P. H. Duy, “Combination of multi-
channel CNN and BiLSTM for host-based intrusion detection”,
Southeast Asian Journal of Sciences, 2018.

S. Wunderlich, M. Ring, D. Landes, & A. Hotho, *Comparison of
system call representations for intrusion detection”, International
Joint Conference: 12th International Conference on Computa-
tional Intelligence in Security for Information Systems and 10th
International Conference on European Transnational Education,
2019.

K. Kim, “GAN based Augmentation for Improving Anomaly
Detection Accuracy in Host-based Intrusion Detection Systems”,
International Journal of Engineering Research and Technology,
2020.

S. Jose, D. Malathi, B. Reddy, & D. Jayaseeli, “Anomaly based
host intrusion detection system using analysis of system calls”,
International Journal of Pure & Applied Mathematics, 2018.

A. Chawla, P. Jacob, B. Lee, & S. Fallon, “Bidirectional LSTM
autoencoder for sequence based anomaly detection in cyber se-
curity”, International Journal of Simulation—Systems, Science &
Technology, 2019.

S. Wunderlich, M. Ring, D. Landes, & A. Hotho, “The Impact of
Different System Call Representations on Intrusion Detection”,
Logic Journal of the IGPL, 2020.

$52

$53

$54

$55

$56

$57

$58

$59

S60

S61

S62

S63

S64

S65

Q. Quan, W. Jinlin, Z. Wei, & X. Mingjun, “Improved edit dis-
tance method for system call anomaly detection”, IEEE 12th In-
ternational Conference on Computer and Information Technology,
2012.

N. Hubballi, S. Biswas, & S. Nandi, “Sequencegram: n-gram
modeling of system calls for program based anomaly detection’,
3rd International Conference on Communication Systems & Net-
works, 2011.

R. Vinayakumar, M. Alazab, K. P. Soman, P. Poornachandran,
A. Al-Nemrat, & S. Venkatraman, “Deep learning approach for
intelligent intrusion detection system”, IEEE Access, 2019.

Z. Wang, Y. Liu, D. He, & S. Chan, “Intrusion detection methods
based on integrated deep learning model”, computers & security,
2021.

N. Hubballi, “Pairgram: Modeling frequency information of
lookahead pairs for system call based anomaly detection’, 4th
International Conference on Communication Systems and Net-
works, 2012.

J. Liu, K. Xiao, L. Luo, Y. Li, & L. Chen, “An intrusion detection
system integrating network-level intrusion detection and host-
level intrusion detection”, IEEE 20th International Conference on
Software Quality, Reliability and Security, 2020.

L. Cheng, Y. Wang, Y. Zhou, & X. Ma, “EADetection: An ef-
ficient and accurate sequential behavior anomaly detection ap-
proach over data streams”, International Journal of Distributed
Sensor Networks, 2018.

Y. S. Ikram, & M. A. Madkour, “Enhanced Host-Based Intru-
sion Detection Using System Call Traces”, Journal of King Ab-
dulaziz University-Computing and Information Technology Sci-
ences, 2019.

W. Liu, L. Ci, & L. Liu, “A new method of fuzzy support vector
machine algorithm for intrusion detection”, Applied Sciences,
2020.

E. N. Yolacan, J. G. Dy, & D. R. Kaeli, “System call anomaly
detection using multi-hmms”, IEEE 8th International Conference
on Software Security and Reliability-Companion, 2014.

Z. Q. Qin, X. K. Ma, & Y. J. Wang, “ADSAD: An unsupervised
attention-based discrete sequence anomaly detection framework
for network security analysis”, Computers & Security, 2020.

G. Sarraf, & M. S. Swetha, “Intrusion Prediction and Detection
with Deep Sequence Modeling”, In International Symposium on
Security in Computing and Communication, 2019.

M. S. Islam, K. K. Sabor, A. Trabelsi, W. Hamou-Lhadj, & L.
Alawneh, “MASKED: A MapReduce Solution for the Kappa-
pruned Ensemble-based Anomaly Detection System”, IEEE Inter-
national Conference on Software Quality, Reliability and Security,
2018.

M. Raj, & S. Jose, “A Host Based Intrusion Detection System Us-
ing Improved Extreme Learning Machine”, International Journal
for Innovative Research in Science and Technology, 2015.

10.2. Table of Notation

Table 13 shows the frequently used acronyms’ abbreviations.

29


Table 13: Table of Notation

Acronym Abbreviation | Acronym Abbreviation

DL Deep Learning ML Machine Learning

SLR Systematic Literature | NLP Natural Language Pro-
Review cessing

HIDS Host Intrusion Detec- | SOC Security | Operation
tion System Center

Syscall System Call FAR False Alarm Rate

References

Ahmad, H., Dharmadasa, I., Ullah, F, Babar, M.A., 2022. A review on
c3i systems’ security: Vulnerabilities, attacks, and countermeasures URL:
doi 10. 1145/3658001|

Ahmadian Ramaki, A., Rasoolzadegan, A., Javan Jafari, A., 2018. A systematic
review on intrusion detection based on the hidden markov model. Statistical
Analysis and Data Mining: The ASA Data Science Journal 11, 111-134.

Aldweesh, A., Derhab, A., Emam, A.Z., 2020. Deep learning approaches for
anomaly-based intrusion detection systems: A survey, taxonomy, and open
issues. Knowledge-Based Systems 189, 105124.

Aleesa, A., Zaidan, B., Zaidan, A., Sahar, N.M., 2020. Review of intrusion
detection systems based on deep learning techniques: coherent taxonomy,
challenges, motivations, recommendations, substantial analysis and future
directions. Neural Computing and Applications 32, 9827-9858.

Aleroud, A., Karabatis, G., 2017. Contextual information fusion for intrusion
detection: a survey and taxonomy. Knowledge and Information Systems 52,
563-619.

Bansal, P., Ahmad, T., et al., 2016. Methods and techniques of intrusion detec-
tion: A review, in: International Conference on Smart Trends for Information
Technology and Computer Communications, Springer. pp. 518-529.

Barddal, J.P., Gomes, H.M., Enembreck, F., Pfahringer, B., 2017. A survey
on feature drift adaptation: Definition, benchmark, challenges and future
directions. Journal of Systems and Software 127, 278-294.

Berman, D.S., Buczak, A.L., Chavis, J.S., Corbett, C.L., 2019. A survey of deep
learning methods for cyber security. Information 10, 122.

Bojanowski, P., Grave, E., Joulin, A., Mikolov, T., 2017. Enriching word vectors
with subword information. Transactions of the Association for Computational
Linguistics 5, 135-146.

Borisaniya, B., Patel, D., et al., 2015. Evaluation of modified vector space
representation using adfa-ld and adfa-wd datasets. Journal of Information
Security 6, 250.

Bouzar-Benlabiod, L., Méziani, L., Rubin, S.H., Belaidi, K., Haddar, N.E.,
2019. Variational encoder-decoder recurrent neural network (ved-rnn) for
anomaly prediction in a host environment, in: 2019 IEEE 20th International
Conference on Information Reuse and Integration for Data Science (IRI),
IEEE. pp. 75-82.

Bouzar-Benlabiod, L., Rubin, S.H., Belaidi, K., Haddar, N.E., 2020. Rnn-ved
for reducing false positive alerts in host-based anomaly detection systems,
in: 2020 IEEE 21st International Conference on Information Reuse and
Integration for Data Science (IRI), IEEE. pp. 17-24.

Braun, V., Clarke, V., 2006. Using thematic analysis in psychology. Qualitative
research in psychology 3, 77-101.

Bridges, R.A., Glass-Vanderlan, T.R., Iannacone, M.D., Vincent, M.S., Chen,
Q., 2019. A survey of intrusion detection systems leveraging host data. ACM
Computing Surveys (CSUR) 52, 1-35.

Brindha, T., Shaji, R., 2015. An analysis of data leakage and prevention tech-
niques in cloud environment, in: 2015 International Conference on Control,
Instrumentation, Communication and Computational Technologies (ICCI-
CCT), IEEE. pp. 350-355.

Buczak, A.L., Guven, E., 2015. A survey of data mining and machine learn-
ing methods for cyber security intrusion detection. IEEE Communications
surveys & tutorials 18, 1153-1176.

Bukac, V., Tucek, P., Deutsch, M., 2012. Advances and challenges in standalone
host-based intrusion detection systems, in: International Conference on Trust,
Privacy and Security in Digital Business, Springer. pp. 105-117.

Buonocore, K., 2001. Selecting an intrusion detection system. URL: |https?
accessed October 3, 2022.

Calero, C., Piattini, M., 2015. Introduction to green in software engineering, in:
Green in Software Engineering. Springer, pp. 3-27.

30

Canali, D., Lanzi, A., Balzarotti, D., Kruegel, C., Christodorescu, M., Kirda,
E., 2012. A quantitative study of accuracy in system call-based malware
detection, in: Proceedings of the 2012 International Symposium on Software
Testing and Analysis, pp. 122-132.

Cardenas, A.A., Manadhata, P.K., Rajan, S.P., 2013. Big data analytics for
security. IEEE Security & Privacy 11, 74-76.

Ceponis, D., Goranin, N., 2018. Towards a robust method of dataset generation
of malicious activity for anomaly-based hids training and presentation of
awsctd dataset. Baltic Journal of Modern Computing 6, 217-234.

Ceponis, D., Goranin, N., 2020. Investigation of dual-flow deep learning models
Istm-fcen and gru-fcn efficiency against single-flow cnn models for the host-
based intrusion and malware detection task on univariate times series data.
Applied Sciences 10, 2373.

Chatzimparmpas, A., Martins, R.M., Jusufi, I., Kucher, K., Rossi, F., Kerren,
A., 2020. The state of the art in enhancing trust in machine learning models
with the use of visualizations, in: Computer Graphics Forum, Wiley Online
Library. pp. 713-756.

Conneau, A., Schwenk, H., Barrault, L., Lecun, Y., 2016. Very deep convo-
lutional networks for text classification. arXiv preprint arXiv:1606.01781

Creech, G., Hu, J., 2013a. Generation of a new ids test dataset: Time to retire
the kdd collection, in: 2013 IEEE Wireless Communications and Networking
Conference (WCNC), IEEE. pp. 4487-4492.

Creech, G., Hu, J., 2013b. A semantic approach to host-based intrusion detection
systems using contiguous and discontiguous system call patterns. TEEE
Transactions on Computers 63, 807-819.

Croft, R., Xie, Y., Babar, M.A., 2021. Data preparation for software vulnerability
prediction: A systematic literature review. arXiv preprint arXiv:2109.05740 .

Cunningham, R.K., Lippmann, R.P., Fried, D.J., Garfinkel, S.L., Graf, I.,
Kendall, K.R., Webster, S-E., Wyschogrod, D., Zissman, M.A., 1999. Eval-
uating intrusion detection systems without attacking your friends: The
1998 DARPA intrusion detection evaluation. Technical Report. MAS-
SACHUSETTS INST OF TECH LEXINGTON LINCOLN LAB.

Czakon, A.J., 2022. 24 evaluation metrics for binary classifica-

tion. URL: |https://neptune.ai/blog/evaluation\protect

discretionary{\char\hyphenchar\font}{}{}metrics\protect\

discretionary{\char\hyphenchar\font}{}{}binary\protect\
discretionary{\char\hyphenchar\font}{}{}classification
accessed October 21, 2022.

Desnoyers, M., Dagenais, M.R., 2006. The Ittng tracer: A low impact perfor-
mance and behavior monitor for gnu/linux, in: OLS (Ottawa Linux Sympo-
sium), Citeseer. pp. 209-224.

Devlin, J., Chang, M.W., Lee, K., Toutanova, K., 2018. Bert: Pre-training of
deep bidirectional transformers for language understanding. arXiv preprint
arXiv:1810.04805 .

Diep, N.N., Thuy, N.T.T., Duy, P-H., 2018. Combination of multi-channel cnn
and bilstm for host-based intrusion detection. Southeast Asian Journal of
Sciences 6, 147-159.

Elsaeidy, A., Munasinghe, K.S., Sharma, D., Jamalipour, A., 2019. Intrusion
detection in smart cities using restricted boltzmann machines. Journal of
Network and Computer Applications 135, 76-83.

Embroker, 2021. 2021 must-know cyber attack statistics. URL:

www.embroker.com/blog/cyber\protect\discretionary{\char\
hyphenchar\font}{}{}attack\protect\discretionary{\char\
hyphenchar\font}{}{}statistics/| accessed October 10, 2022.

Gamage, S., Samarabandu, J., 2020. Deep learning methods in network intrusion
detection: A survey and an objective comparison. Journal of Network and
Computer Applications 169, 102767.

Garousi, V., Felderer, M., Mantyla, M.V., 2019. Guidelines for including grey lit-
erature and conducting multivocal literature reviews in software engineering.
Information and Software Technology 106, 101-121.

Grimmer, M., Kaelble, T., Rahm, E., 2021. Improving host-based intrusion
detection using thread information, in: International Symposium on Emerging
Information Security and Applications, Springer. pp. 159-177.

Grimmer, M., RGhling, M.M., Kreusel, D., Ganz, S., 2019a. A modern and
sophisticated host based intrusion detection data set. IT-Sicherheit als Vo-
raussetzung fiir eine erfolgreiche Digitalisierung , 135-145.

Grimmer, M., Rohling, M.M., Kreusel, D., Ganz, S., 2019b. A modern and
sophisticated host based intrusion detection data set. IT-Sicherheit als Vo-
raussetzung fiir eine erfolgreiche Digitalisierung , 135-145.

Giimiisbas, D., Yildirim, T., Genovese, A., Scotti, F, 2020. A comprehensive



survey of databases and deep learning methods for cybersecurity and intrusion
detection systems. IEEE Systems Journal .

Haider, W., Creech, G., Xie, Y., Hu, J., 2016. Windows based data sets for
evaluation of robustness of host based intrusion detection systems (ids) to
zero-day and stealth attacks. Future Internet 8, 29.

Haider, W., Hu, J., Slay, J., Turnbull, B.P., Xie, Y., 2017. Generating realistic in-
trusion detection system dataset based on fuzzy qualitative modeling. Journal
of Network and Computer Applications 87, 185-192.

Hassan, M.M., Gumaei, A., Alsanad, A., Alrubaian, M., Fortino, G., 2020.
A hybrid deep learning model for efficient intrusion detection in big data
environment. Information Sciences 513, 386-396.

Hodo, E., Bellekens, X., Hamilton, A., Tachtatzis, C., Atkinson, R., 2017.
Shallow and deep networks intrusion detection system: A taxonomy and
survey. arXiv preprint arXiv:1701.02145 .

Huang, Q., Xia, X., Lo, D., Murphy, G.C., 2018. Automating intention mining.
IEEE Transactions on Software Engineering 46, 1098-1119.

IBM, 2022. Cost of a data breach report 2021. URL:/https : //www. ibm. com/|
accessed October 10, 2022.

Ignaczak, L., Goldschmidt, G., Costa, C.A.D., Righi, R.D.R., 2021. Text mining
in cybersecurity: A systematic literature review. ACM Computing Surveys
(CSUR) 54, 1-36.

Insiders, C., 2018. Insider threat 2018 report. URL:

accessed October 21, 2022.

Irfan, R., King, C.K., Grages, D., Ewen, S., Khan, S.U., Madani, S.A., Kolodziej,
J., Wang, L., Chen, D., Rayes, A., et al., 2015. A survey on text mining in
social networks. The Knowledge Engineering Review 30, 157-170.

Islam, C., Babar, M.A., Nepal, S., 2019. Automated interpretation and integra-
tion of security tools using semantic knowledge, in: International Conference
on Advanced Information Systems Engineering, Springer. pp. 513-528.

Jiao, Y., Du, P., 2016. Performance measures in evaluating machine learning
based bioinformatics predictors for classifications. Quantitative Biology 4,
320-330.

Jose, S., Malathi, D., Reddy, B., Jayaseeli, D., 2018. A survey on anomaly based
host intrusion detection system, in: Journal of Physics: Conference Series,
IOP Publishing. p. 012049.

Kalimuthan, C., Renjit, J.A., 2020. Review on intrusion detection using feature
selection with machine learning techniques. Materials Today: Proceedings
33, 3794-3802.

Khraisat, A., Gondal, I., Vamplew, P., Kamruzzaman, J., 2019. Survey of intru-
sion detection systems: techniques, datasets and challenges. Cybersecurity 2,
1-22.

Khreich, W., Khosravifar, B., Hamou-Lhadj, A., Talhi, C., 2017. An anomaly
detection system based on variable n-gram features and one-class svm. Infor-
mation and Software Technology 91, 186-197.

Kim, H., Jeong, Y.S., 2019. Sentiment classification using convolutional neural
networks. Applied Sciences 9, 2347.

Kitchenham, B., Charters, S., 2007. Guidelines for performing systematic
literature reviews in software engineering. Technical Report. Technical
report, Ver. 2.3 EBSE Technical Report. EBSE.

Kitchenham, B.A., Dyba, T., Jorgensen, M., 2004. Evidence-based software
engineering, in: Proceedings. 26th International Conference on Software
Engineering, IEEE. pp. 273-281.

Kobayashi, S., 2018. Contextual augmentation: Data augmentation by words
with paradigmatic relations. arXiv preprint arXiv:1805.06201 .

KP, S., Alazab, M., et al., 2020. A comprehensive tutorial and survey of
applications of deep learning for cyber security .

Kumar, B.S., Ravi, V., 2016. A survey of the applications of text mining in
financial domain. Knowledge-Based Systems 114, 128-147.

Lab, L.S.S., 2011. Anubis: Analyzing unknown binaries. URL:
accessed September 6, 2022.

Le, T.H., Chen, H., Babar, M.A., 2021. A survey on data-driven software vul-
nerability assessment and prioritization. ACM Computing Surveys (CSUR)

Lee, S.W., Mohammadi, M., Rashidi, S., Rahmani, A.M., Masdari, M., Hossein-
zadeh, M., et al., 2021. Towards secure intrusion detection systems using
deep learning techniques: Comprehensive analysis and review. Journal of

31

Network and Computer Applications 187, 103111.

Liao, H.J., Lin, C.H.R., Lin, Y.C., Tung, K.Y., 2013. Intrusion detection system:
A comprehensive review. Journal of Network and Computer Applications 36,
16-24.

Lin, G., Wen, S., Han, Q.L., Zhang, J., Xiang, Y., 2020. Software vulnerability
detection using deep neural networks: A survey. Proceedings of the IEEE
108, 1825-1848.

Liu, F., Li, G., Zhao, Y., Jin, Z., 2020a. Multi-task learning based pre-trained
language model for code completion, in: Proceedings of the 35th IEEE/ACM
International Conference on Automated Software Engineering, pp. 473-485.

Liu, H., Lang, B., 2019. Machine learning and deep learning methods for
intrusion detection systems: A survey. Applied Sciences 9, 4396.

Liu, J., Xiao, K., Luo, L., Li, Y., Chen, L., 2020b. An intrusion detection
system integrating network-level intrusion detection and host-level intrusion
detection, in: 2020 IEEE 20th International Conference on Software Quality,
Reliability and Security (QRS), IEEE. pp. 122-129.

Liu, M., Xue, Z., Xu, X., Zhong, C., Chen, J., 2018. Host-based intrusion detec-
tion system with system calls: Review and future trends. ACM Computing
Surveys (CSUR) 51, 1-36.

Ly, S., Wang, J., Yang, Y., Liu, J., 2018. Intrusion prediction with system-call
sequence-to-sequence model. IEEE Access 6, 71413-71421.

Ma, E., 2019. Nlp augmentation. URL: https: //github.com/makcedward/
accessed October 3, 2022.

Maggi, F., Matteucci, M., Zanero, S., 2008. Detecting intrusions through system
call sequence and argument analysis. IEEE Transactions on Dependable and
Secure Computing 7, 381-395.

Mahoney, M.V., Chan, P.K., 2003. An analysis of the 1999 darpa/lincoln
laboratory evaluation data for network anomaly detection, in: International
Workshop on Recent Advances in Intrusion Detection, Springer. pp. 220-237.

Mane, S., Rao, D., 2021. Explaining network intrusion detection system using
explainable ai framework. arXiv preprint arXiv:2103.07110.

Marino, D.L., Wickramasinghe, C.S., Manic, M., 2018. An adversarial approach
for explainable ai in intrusion detection systems, in: IECON 2018-44th
Annual Conference of the IEEE Industrial Electronics Society, IEEE. pp.
3237-3243.

Metasploit, 2020. Metasploit pentration testing software. URL:
accessed September 6, 2022.

Mikolov, T., Sutskever, I., Chen, K., Corrado, G.S., Dean, J., 2013. Distributed
representations of words and phrases and their compositionality, in: Advances
in neural information processing systems, pp. 3111-3119.

MISP, 2021. Misp - open source threat intelligence platform. URL: |https }
accessed October 3, 2022.

Modi, C., Patel, D., Borisaniya, B., Patel, H., Patel, A., Rajarajan, M., 2013. A
survey of intrusion detection techniques in cloud. Journal of network and
computer applications 36, 42-57.

Mohammadi, M., Rashid, T.A., Karim, S.H.T., Aldalwie, A.H.M., Tho, Q.T.,
Bidaki, M., Rahmani, A.M., Hosseinzadeh, M., 2021. A comprehensive
survey and taxonomy of the svm-based intrusion detection systems. Journal
of Network and Computer Applications 178, 102983.

Moustafa, N., Slay, J., 2015. Unsw-nb15: a comprehensive data set for network
intrusion detection systems (unsw-nb15 network data set), in: 2015 military
communications and information systems conference (MilCIS), IEEE. pp.
1-6.

Muncaster, P., 2021. Organizations now have 76 security tools to manage.

Murdoch, W.J., Singh, C., Kumbier, K., Abbasi-Asl, R., Yu, B., 2019. Defini-
tions, methods, and applications in interpretable machine learning. Proceed-
ings of the National Academy of Sciences 116, 22071-22080.

Murtaza, S.S., Khreich, W., Hamou-Lhadj, A., Couture, M., 2013. A host-
based anomaly detection approach by representing system calls as states of
kernel modules, in: 2013 IEEE 24th International Symposium on Software
Reliability Engineering (ISSRE), IEEE. pp. 431-440.

Mutz, D., Valeur, F., Vigna, G., Kruegel, C., 2006. Anomalous system call
detection. ACM Transactions on Information and System Security (TISSEC)
9, 61-93.

Nassirtoussi, A.K., Aghabozorgi, S., Wah, T.Y., Ngo, D.C.L., 2014. Text
mining for market prediction: A systematic review. Expert Systems with
Applications 41, 7653-7670.

Niederhut, D., 2020. niacin: A python package for text data enrichment. Journal
of Open Source Software 5, 2136.

OSSEC, 2022. Opensource hids: Ossec. URL:
accessed October 10, 2022.


Patel, A., Taghavi, M., Bakhtiyari, K., Junior, J.C., 2013. An intrusion detection
and prevention system in cloud computing: A systematic review. Journal of
network and computer applications 36, 25-41.

Pendleton, M., Xu, S., 2017. A dataset generator for next generation system
call host intrusion detection systems, in: MILCOM 2017-2017 IEEE Military
Communications Conference (MILCOM), IEEE. pp. 231-236.

Pennington, J., Socher, R., Manning, C.D., 2014. Glove: Global vectors for
word representation, in: Proceedings of the 2014 conference on empirical
methods in natural language processing (EMNLP), pp. 1532-1543.

Peters, M.E., Neumann, M., Iyyer, M., Gardner, M., Clark, C., Lee, K.,
Zettlemoyer, L., 2018. Deep contextualized word representations. corr
abs/1802.05365 (2018). arXiv preprint arXiv:1802.05365 .

Qiu, S., Xu, B., Zhang, J., Wang, Y., Shen, X., de Melo, G., Long, C., Li,
X., 2020. Easyaug: An automatic textual data augmentation platform for
classification tasks, in: Companion Proceedings of the Web Conference 2020,
pp. 249-252.

Ring, M., Wunderlich, S., Scheuring, D., Landes, D., Hotho, A., 2019. A survey
of network-based intrusion detection data sets. Computers & Security 86,
147-167.

Ring IV, J.H., Van Oort, C.M., Durst, S., White, V., Near, J.P., Skalka, C.,
2021. Methods for host-based intrusion detection with deep learning. Digital
Threats: Research and Practice (DTRAP) 2, 1-29.

Rosenberg, I., Shabtai, A., Elovici, Y., Rokach, L., 2021. Adversarial machine
learning attacks and defense methods in the cyber security domain. ACM
Computing Surveys (CSUR) 54, 1-36.

Salo, F., Injadat, M., Nassif, A.B., Shami, A., Essex, A., 2018. Data mining
techniques in intrusion detection systems: A systematic literature review.
IEEE Access 6, 56046-56058.

Sarraf, G., Swetha, M., 2019. Intrusion prediction and detection with deep
sequence modeling, in: International Symposium on Security in Computing
and Communication, Springer. pp. 11-25.

Shahin, M., Babar, M.A., Zhu, L., 2017. Continuous integration, delivery
and deployment: a systematic review on approaches, tools, challenges and
practices. IEEE Access 5, 3909-3943.

Shahin, M., Liang, P., Babar, M.A., 2014. A systematic review of software
architecture visualization techniques. Journal of Systems and Software 94,
161-185.

Simmons, C., Ellis, C., Shiva, S., Dasgupta, D., Wu, Q., 2014. Avoidit: A cyber
attack taxonomy, in: 9th annual symposium on information assurance, pp.
2-12.

Song, M., Hu, Y., Chen, H., Li, T., 2017. Towards pervasive and user satisfactory
cnn across gpu microarchitectures, in: 2017 IEEE International Symposium
on High Performance Computer Architecture (HPCA), IEEE. pp. 1-12.

SonicWall, 2022. 2022 sonicwall cyber threat report. URL: https://tinyurl
accessed October 10, 2022.
Splunk, 2021. The 2020 magic quadrant for siem. URL: https://tinyurl

com/y6pp7vd8 accessed October 13, 2020.
Strigl, D., Kofler, K., Podlipnig, S., 2010. Performance and scalability of gpu-

based convolutional neural networks, in: 2010 18th Euromicro Conference
on Parallel, Distributed and Network-based Processing, IEEE. pp. 317-324.

Strubell, E., Ganesh, A., McCallum, A., 2019. Energy and policy considerations
for deep learning in nlp. arXiv preprint arXiv:1906.02243 .

Swimlane, 2021. Soar report, 2021. URL:

hyphenchar\font}{}{}SOAR\protect\discretionary{\char\

accessed October 21, 2022.

Sworna, Z.T., Islam, C., Babar, M.A., 2022. Apiro: A framework for auto-
mated security tools api recommendation. ACM Transactions on Software
Engineering and Methodology .

Symantec, 2018. Symantec security response. URL:|https://tinyurl.com/|
accessed September 6, 2022.

Thomas, C., Sharma, V., Balakrishnan, N., 2008. Usefulness of darpa dataset for
intrusion detection system evaluation, in: Data Mining, Intrusion Detection,
Information Assurance, and Data Networks Security 2008, International
Society for Optics and Photonics. p. 69730G.

UNM, C.D., 2004. University of new mexico intrusion detection
dataset. URL:|https://www.cs .unm.edu/~innsec/systencalls. html
accessed September 6, 2022.

Utgoff, PE., 1989. Incremental induction of decision trees. Machine learning 4,
161-186.

Vinayakumar, R., Alazab, M., Soman, K., Poornachandran, P., Al-Nemrat, A.,

32

Venkatraman, S., 2019. Deep learning approach for intelligent intrusion
detection system. Ieee Access 7, 41525-41550.

VirusShare, 2017. Virusshare. URL: |https://virusshare .com/| accessed
October 6, 2022.

VirusTotal, 2017. Virustotal. URL:
accessed October 6, 2022.

Wang, M., Zheng, K., Yang, Y., Wang, X., 2020. An explainable machine
learning framework for intrusion detection systems. IEEE Access 8, 73127—
73141.

Wei, J., Zou, K., 2019. Eda: Easy data augmentation techniques for boosting
performance on text classification tasks. arXiv preprint arXiv:1901.11196 .

Wohlin, C., 2014. Guidelines for snowballing in systematic literature studies and
a replication in software engineering, in: Proceedings of the 18th international
conference on evaluation and assessment in software engineering, pp. 1-10.

Xia, C., Zhang, C., Zhang, J., Liang, T., Peng, H., Philip, S.Y., 2020. Low-shot
learning in natural language processing, in: 2020 IEEE Second International
Conference on Cognitive Machine Intelligence (CogMI), IEEE. pp. 185-189.

Xin, Y., Kong, L., Liu, Z., Chen, Y., Li, Y., Zhu, H., Gao, M., Hou, H., Wang, C.,
2018. Machine learning and deep learning methods for cybersecurity. IEEE
Access 6, 35365-35381.

Zarpelao, B.B., Miani, R.S., Kawakani, C.T., de Alvarenga, S.C., 2017. A survey
of intrusion detection in internet of things. Journal of Network and Computer
Applications 84, 25-37.

Zarrin Tasnim Sworna, Z.M., Babar, M.A., 2022. Online appendix of “nlp
methods in host-based intrusion detection systems: A systematic review
and future directions”. URL: accessed
October 9, 2022.

Zoppi, T., Ceccarelli, A., 2021. Prepare for trouble and make it double!
supervised—unsupervised stacking for anomaly-based intrusion detection.
Journal of Network and Computer Applications 189, 103106.
