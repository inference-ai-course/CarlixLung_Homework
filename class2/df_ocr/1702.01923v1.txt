arXiv:1702.01923v1 [cs.CL] 7 Feb 2017

Comparative Study of CNN and RNN for Natural Language Processing

Wenpeng Yin’, Katharina Kann’, Mo Yu' and Hinrich Schiitze'
‘CIS, LMU Munich, Germany

‘TBM Research, USA

{wenpeng, kann}@cis.1lmu.de, yum@us.ibm.com

Abstract

Deep neural networks (DNNs) have rev-
olutionized the field of natural language
processing (NLP). Convolutional Neural
Network (CNN) and Recurrent Neural
Network (RNN), the two main types of
DNN architectures, are widely explored to
handle various NLP tasks. CNN is sup-
posed to be good at extracting position-
invariant features and RNN at modeling
units in sequence. The state-of-the-art on
many NLP tasks often switches due to the
battle of CNNs and RNNs. This work is
the first systematic comparison of CNN
and RNN on a wide range of representa-
tive NLP tasks, aiming to give basic guid-
ance for DNN selection.

1 Introduction

Natural language processing (NLP) has benefited
greatly from the resurgence of deep neural net-
works (DNNs), due to their high performance
with less need of engineered features. There are
two main DNN architectures: convolutional neu-
ral network (CNN) (LeCun et al., 1998) and recur-
rent neural network (RNN) (Elman, 1990). Gat-
ing mechanisms have been developed to alleviate
some limitations of the basic RNN, resulting in
two prevailing RNN types: long short-term mem-
ory (LSTM) (Hochreiter and Schmidhuber, 1997)
and gated recurrent unit (GRU) (Cho et al., 2014).

Generally speaking, CNNs are hierarchical and
RNNs sequential architectures. How should we
choose between them for processing language?
Based on the characterization “hierarchical (CNN)
vs. sequential (RNN)”, it is tempting to choose a
CNN for classification tasks like sentiment classi-
fication since sentiment is usually determined by
some key phrases; and to choose RNNs for a se-

quence modeling task like language modeling as
it requires flexible modeling of context dependen-
cies. But current NLP literature does not sup-
port such a clear conclusion. For example, RNNs
perform well on document-level sentiment clas-
sification (Tang et al., 2015); and Dauphin et al.
(2016) recently showed that gated CNNs outper-
form LSTMs on language modeling tasks, even
though LSTMs had long been seen as better suited.
In summary, there is no consensus on DNN selec-
tion for any particular NLP problem.

This work compares CNNs, GRUs and LSTMs
systematically on a broad array of NLP tasks: sen-
timent/relation classification, textual entailment,
answer selection, question-relation matching in
Freebase, Freebase path query answering and part-
of-speech tagging.

Our experiments support two key findings. (i)
CNNs and RNNs provide complementary infor-
mation for text classification tasks. Which archi-
tecture performs better depends on how impor-
tant it is to semantically understand the whole se-
quence. (ii) Learning rate changes performance
relatively smoothly, while changes to hidden size
and batch size result in large fluctuations.

2 Related Work

To our knowledge, there has been no systematic
comparison of CNN and RNN on a large array of
NLP tasks.

Vu et al. (2016) investigate CNN and basic
RNN (i.e., no gating mechanisms) for relation
classification. They report higher performance
of CNN than RNN and give evidence that CNN
and RNN provide complementary information:
while the RNN computes a weighted combina-
tion of all words in the sentence, the CNN ex-
tracts the most informative ngrams for the rela-
tion and only considers their resulting activations.


Max-Pooling
Layer ‘
h IZ
Convolution nN s
Layer ' \
input x
(a) CNN

(b) GRU

LI

(c) LSTM

Figure 1: Three typical DNN architectures

Both Wen et al. (2016) and Adel and Schiitze
(2017) support CNN over GRU/LSTM for classi-
fication of long sentences. In addition, Yin et al.
(2016) achieve better performance of attention-
based CNN than attention-based LSTM for an-
swer selection. Dauphin et al. (2016) further argue
that a fine-tuned gated CNN can also model long-
context dependency, getting new state-of-the-art in
language modeling above all RNN competitors

In contrast, Arkhipenko et al. (2016) compare
word2vec (Mikolov et al., 2013), CNN, GRU and
LSTM in sentiment analysis of Russian tweets,
and find GRU outperforms LSTM and CNN.

In empirical evaluations, Chung et al. (2014)
and Jozefowicz et al. (2015) found there is no clear
winner between GRU and LSTM. In many tasks,
they yield comparable performance and tuning hy-
perparameters like layer size is often more impor-
tant than picking the ideal architecture.

3 Models

This section gives a brief introduction of CNN,
GRU and LSTM.

3.1 Convolutional Neural Network (CNN)

Input Layer Sequence x contains n entries.
Each entry is represented by a d-dimensional
dense vector; thus the input x is represented as a
feature map of dimensionality d x n. Figure 1(a)
shows the input layer as the lower rectangle with
multiple columns.

Convolution Layer is used for representation
learning from sliding w-grams. For an input se-

quence with n entries: 21,%2,...,%n, let vec-
tor c; € R@ be the concatenated embeddings
of w entries %j~w41,...,2; Where w is the fil-
ter width and 0 < i < s+ w. Embeddings
for xz;,% < lori > n, are zero padded. We
then generate the representation p; € R¢ for
the w-gram 2%; w+41,..., 2; using the convolution
weights W ¢ R¢&* “4;

p; = tanh(W -c; + b) (1)

where bias b € R?.

Maxpooling All w-gram representations p;
(i = 1---s + w — 1) are used to generate the
representation of input sequence x by maxpool-
ing: x; = max(pi,j,P2;,°°-) G =1,--- ,d).

3.2 Gated Recurrent Unit (GRU)

GRU, as shown in Figure 1(b), models text x as
follows:

z = o(x,U* + h,_,W’) (2)
r = o(x,U"+h,1W’) (3)
Ss; = tanh(x,U*+ (hj10r)W*) (4)
hy = (l—z)os;+z0 hy} (5)

x; € R? represents the token in « at position ft,
h; € R" is the hidden state at t, supposed to en-
code the history 71, ---, x. z and r are two gates.
AllU € R®?,W € R’™" are parameters.


3.3. Long Short-Time Memory (LSTM)
LSTM is denoted in Figure l(c). It models the
word sequence z as follows:

o(x,U" + hy_1W’' + bj) (6)

i =

f, = o(x,U! + hy1W’! + by) (7)
Oo, = o(x,U° +h,1W° + b,) (8)
q: = tanh(x,U%+h;;W‘%+b,) (9)
Pe = f* Pri tie* ae (10)
h, = o; * tanh(p;) (11)

LSTM has three gates: input gate i;, forget gate
f; and output gate o;. All gates are generated by
a sigmoid function over the ensemble of input 2;
and the preceding hidden state h,_;. In order to
generate the hidden state at current step ¢, it first
generates a temporary result q by a tanh non-
linearity over the ensemble of input x, and the pre-
ceding hidden state hz_1, then combines this tem-
porary result q with history p,—1 by input gate 2,
and forget gate f; respectively to get an updated
history p;, finally uses output gate o, over this up-
dated history ;; to get the final hidden state h,.

4 Experiments

4.1 Tasks

Sentiment Classification (SentiC) on Stanford
Sentiment Treebank (SST) (Socher et al., 2013).
This dataset predicts the sentiment (positive or
negative) of movie reviews. We use the given split
of 6920 train, 872 dev and 1821 test sentences.
As in (Kalchbrenner et al., 2014; Le and Mikolov,
2014), we treat labeled phrases that occur as sub-
parts of training sentences as independent training
instances. Measure: accuracy.

Relation Classification (RC) on SemEval 2010
task 8 (Hendrickx et al., 2009). It consists of sen-
tences which have been manually labeled with 19
relations (18 directed relations and Other), 8000
sentences in train and 2717 in test. As there is
no dev set, we use 1500 training examples as dev,
similar to Vu et al. (2016). Measure: F1.

Textual Entailment (TE) on Stanford Natu-
ral Language Inference (SNLI) (Bowman et al.,
2015). SNLI contains premise-hypothesis pairs,
labeled with a relation (entailment, contradiction,
neutral). After removing unlabeled pairs, we end
up having 549,367 pairs for train, 9,842 for dev
and 9,824 for test. Measure: accuracy.

Answer Selection (AS) on WikiQA (Yang
et al., 2015), an open domain question-answer

dataset. We use the subtask that assumes that there
is at least one correct answer for a question. The
corresponding dataset consists of 20,360 question-
candidate pairs in train, 1,130 in dev and 2,352
in fest where we adopt the standard setup of only
considering questions with correct answers in test.
The task is to choose the correct answer(s) from
some candidates for a question. Measures: MAP
and MRR.

Question Relation Match (QRM). We uti-
lize WebQSP (Yih et al., 2016) dataset to create
a large-scale relation detection task, benefitting
from the availability of labeled semantic parses
of questions. For each question, we (i) select the
topic entity from the parse; (ii) select all the re-
lations/relation chains (length < 2) connecting to
the topic entity; and (iii) set the relations/relation-
chains in the labeled parse as positive and all the
others as negative. Following Yih et al. (2016) and
Xu et al. (2016), we formulate this task as a se-
quence matching problem. Ranking-loss is used
for training. Measure: accuracy.

Path Query Answering (PQA) on the path
query dataset released by Guu et al. (2015). It
contains KB paths like en, 79, 71,--+ , Tt, eg, where
head entity e;, and relation sequence r9,71,--- ,T¢
are encoded to predict the tail entity e,. There are
6,266,058/27,163/109,557 paths in train/dev/test,
respectively. Measure: hit@ 10.

Part-of-Speech Tagging on WSJ. We use the
setup of (Blitzer et al., 2006; Petrov and McDon-
ald, 2012): sections 2-21 are train, section 22 is
dev and section 23 is test. Measure: accuracy.

We organize above tasks in four categories. (i)
TextC. Text classification, including SentiC and
RC. (ii) SemMatch including TE, AS and QRM.
(iii) SeqOrder. Sequence order, i.e., PQA. (iv)
ContextDep. Context dependency, i.e., POS tag-
ging. By investigating these four categories, we
aim to discover some basic principles involved in
utilizing CNNs / RNNs.

4.2 Experimental Setup

To fairly study the encoding capability of differ-
ent basic DNNs, our experiments have the follow-
ing design. (i) Always train from scratch, no ex-
tra knowledge, e.g., no pretrained word embed-
dings. (ii) Always train using a basic setup without
complex tricks such as batch normalization. (iii)
Search for optimal hyperparameters for each task
and each model separately, so that all results are


performance | Ir

hidden batch sentLen filter_size margin

CNN 82.38 0.2 20 2, 60 3 -
SentiC (acc) GRU 86.32 0.1 30 50 60 - -
TextC LSTM 84.51 0.2 20 £40 60 - -
CNN 68.02 0.12 70 10 20 3 -
RC (F1) GRU 68.56 0.12 80 100 20 - _
LSTM 66.45 0.1 80 20 20 - -
CNN 7713 0.1 70 50 50 3 -
TE (acc) GRU 78.78 0.1 50 80 65 — -
LSTM 77.85 0.1 80 50 50 — -
CNN |(63.69,65.01); 0.01 30 60 40 3 0.3
SemMatch AS (MAP & MRR) GRU] (62.58,63.59)| 0.1 80 150 40 - 0.3
LSTM |(62.00,63.26)} 0.1 60 150 45 - 0.1
CNN 71.50 0.125 400 50 17 5 0.01
QRM (acc) GRU 69.80 1.0 400 50 17 - 0.01
LSTM 71.44 1.0 200 50 17 - 0.01
CNN 54.42 0.01 250 50 5 3 0.4
SegOrder PQA (hit@10) GRU 55.67 0.1 250 50 5 - 0.3
LSTM 55.39 0.1 300 50 5 - 0.3
CNN 94.18 0.1 100 10 60 5 -
GRU 93.15 0.1 50 50 60 — -
ContextDep POS tagging (acc) LSTM 93.18 0.1 200 70 60 - -
Bi-GRU 94.26 0.1 50 50 60 - -
Bi-LSTM 94.35 0.1 150 5 60 - -

Table 1: Best results or CNN, GRU and LSTM in NLP tasks

Gold CNN GRU |/examples

T F T

It ’s a movie — and an album — you wo n’t want to miss
These are names to remember , in order to avoid them in the future

In the second half of the film , Frei ’s control loosens in direct proportion to the
amount of screen time he gives nachtwey for self-analysis

F T RF
F F T
T TT F

|The result is mesmerizing — filled with menace and squalor

Table 2: CNN vs GRU in Sentiment Classification

based on optimal hyperparameters. (iv) Investi-
gate the basic architecture and utilization of each
model: CNN consists of a convolution layer and
a max-pooling layer; GRU and LSTM model the
input from left to right and always use the last hid-
den state as the final representation of the input.
An exception is for POS tagging, we also report
bi-directional RNNs as this can make sure each
word’s representation can encode the word’s con-
text of both sides, like the CNN does.

Hyperparameters are tuned on dev: hidden size,
minibatch size, learning rate, maximal sentence
length, filter size (for CNN only) and margin in
ranking loss in AS, QRM and PQA tasks.

4.3 Results & Analysis

Table 1 shows experimental results for all tasks
and models and corresponding hyperparameters.
For TextC, GRU performs best on SentiC and
comparably with CNN in RC. For SemMatch,
CNN performs best on AS and QRM while GRU
(and also LSTM) outperforms CNN on TE. For
SeqOrder (PQA), both GRU and LSTM outper-
form CNN. For ContextDep (POS tagging), CNN
outperforms one-directional RNNs, but lags be-
hind bi-directional RNNs.

The results for SeqOrder and ContextDep are
as expected: RNNs are well suited to encode or-
der information (for PQA) and long-range context
dependency (for POS tagging). But for the other


—— train
—*— dev
test | |

0.1

proportion
° °
3 3S
8 &

a.
3S
g

0.02

sentence lengths

0.9

0.8

0.7

0.6

0.5 F al

acc

0.4- 4
—8— CNN

—*— GRU
0.37 GRU-CNN |

0.2- 4

0.1 - 4

0 4

-0.1 1 1 L L L L 1 1
1-5 6~10 11-15 16-20 21-25 26~30 31~35 36~40 41~45 46~

sentence length ranges

Figure 2: Distributions of sentence lengths (left) and accuracies of different length ranges (right).

of 4

0.001 0.005 0.01 0.05 o4 02 03 5 10 15 20 25 30 35 40 45 50 60 70 80 90 100 120 150 200 250 300 5 10 20 30 40 50 60 70 80 100
hidden size

batch size

06

WV I

f
.
© ose. = j
= ii
a \ |
0.54F /

0.52

i O5+ —— CNN

0.001 0.005 0.01 0.05 0.4 02 10 20 30 40 50 60 70 80 90 100 120 150 200 250 300 30 40 50 60 70 80
hidden size

learning rate

0.48

100 150 200 «250 © 300
batch size

Figure 3: Accuracy for sentiment classification (top) and MRR for WikiQA (bottom) as a function of
three hyperparameters: learning rate (left), hidden size (center) and batch size (right).

two categories, TextC and SemMatch, some un-
expected observations appear. CNNs are consid-
ered good at extracting local and position-invariant
features and therefore should perform well on
TextC; but in our experiments they are outper-
formed by RNNs, especially in SentiC. How can
this be explained? RNNs can encode the structure-
dependent semantics of the whole input, but how
likely is this helpful for TextC tasks that mostly
depend on a few local regions? To investigate the
unexpected observations, we do some error analy-
sis on SentiC.

Qualitative analysis Table 2 shows examples
(1) — (4) in which CNN predicts correctly while
GRU predicts falsely or vice versa. We find that
GRU is better when sentiment is determined by
the entire sentence or a long-range semantic de-

pendency — rather than some local key-phrases
— is involved. Example (1) contains the phrases
“won't” and “miss” that usually appear with nega-
tive sentiment, but the whole sentence describes a
positive sentiment; thus, an architecture like GRU
is needed that handles long sequences correctly.
On the other hand, modeling the whole sentence
sometimes is a burden — neglecting the key parts.
The GRU encodes the entire word sequence of the
long example (3), making it hard for the negative
keyphrase “loosens” to play a main role in the final
representation. The first part of example (4) seems
positive while the second part seems negative. As
GRU chooses the last hidden state to represent the
sentence, this might result in the wrong prediction.

Studying acc vs sentence length can also sup-
port this. Figure 2 (left) shows sentence lengths in
SST are mostly short in train while close to nor-


mal distribution around 20 in dev and test. Fig-
ure 2 (right) depicts the accuracies w.r.t length
ranges. We found that GRU and CNN are compa-
rable when lengths are small, e.g., <10, then GRU
gets increasing advantage over CNN when meet
longer sentences. Error analysis shows that long
sentences in SST mostly consist of clauses of in-
verse semantic such as “this version is not classic
like its predecessor, but its pleasures are still plen-
tiful”. This kind of clause often include a local
strong indicator for one sentiment polarity, like “‘is
not” above, but the successful classification relies
on the comprehension of the whole clause.

Hence, which DNN type performs better in text
classification task depends on how often the com-
prehension of globalNong-range semantics is re-
quired.

This can also explain the phenomenon in Sem-
Match — GRU/LSTM surpass CNN in TE while
CNN dominates in AS, as textual entailment re-
lies on the comprehension of the whole sentence
(Bowman et al., 2015), question-answer in AS in-
stead can be effectively identified by key-phrase
matching (Yin et al., 2016).

Sensitivity to hyperparameters We next check
how stable the performance of CNN and GRU are
when hyperparameter values are varied. Figure 3
shows the performance of CNN, GRU and LSTM
for different learning rates, hidden sizes and batch
sizes. All models are relativly smooth with respect
to learning rate changes. In contrast, variation in
hidden size and batch size cause large oscillations.
Nevertheless, we still can observe that CNN curve
is mostly below the curves of GRU and LSTM in
SentiC task, contrarily located at the higher place
in AS task.

5 Conclusions

This work compared the three most widely used
DNNs — CNN, GRU and LSTM - in representa-
tive sample of NLP tasks. We found that RNNs
perform well and robust in a broad range of tasks
except when the task is essentially a keyphrase
recognition task as in some sentiment detection
and question-answer matching settings. In addi-
tion, hidden size and batch size can make DNN
performance vary dramatically. This suggests that
optimization of these two parameters is crucial to
good performance of both CNNs and RNNs.

References

Heike Adel and Hinrich Schiitze. 2017. Exploring dif-
ferent dimensions of attention for uncertainty detec-
tion. In Proceedings of EACL.

K. Arkhipenko, I. Kozlov, J. Trofimovich, K. Skorni-
akov, A. Gomzin, and D. Turdakov. 2016. Compar-
ison of neural network architectures for sentiment
analysis of russian tweets. In Proceedings of “Dia-
logue 2016”.

John Blitzer, Ryan McDonald, and Fernando Pereira.
2006. Domain adaptation with structural correspon-
dence learning. In Proceedings of EMNLP. pages
120-128.

Samuel R Bowman, Gabor Angeli, Christopher Potts,
and Christopher D Manning. 2015. A large anno-
tated corpus for learning natural language inference.
In Proceedings of EMNLP. pages 632-642.

Kyunghyun Cho, Bart van Merriénboer, Dzmitry Bah-
danau, and Yoshua Bengio. 2014. On the properties
of neural machine translation: Encoder-decoder ap-
proaches. Eighth Workshop on Syntax, Semantics
and Structure in Statistical Translation .

Junyoung Chung, Caglar Gulcehre, KyungHyun Cho,
and Yoshua Bengio. 2014. Empirical evaluation of
gated recurrent neural networks on sequence model-
ing. arXiv preprint arXiv: 1412.3555 .

Yann N Dauphin, Angela Fan, Michael Auli, and
David Grangier. 2016. Language modeling with
gated convolutional networks. arXiv preprint
arXiv:1612.08083 .

Jeffrey L. Elman. 1990. Finding structure in time.
Cognitive Science 14(2):179-211.

Kelvin Guu, John Miller, and Percy Liang. 2015.
Traversing knowledge graphs in vector space. In
Proceedings of EMNLP. pages 318-327.

Iris Hendrickx, Su Nam Kim, Zornitsa Kozareva,
Preslav Nakov, Diarmuid O Séaghdha, Sebastian
Pad6o, Marco Pennacchiotti, Lorenza Romano, and
Stan Szpakowicz. 2009. Semeval-2010 task 8:
Multi-way classification of semantic relations be-
tween pairs of nominals. In Proceedings of Se-
mEval. pages 94-99,

Sepp Hochreiter and Jiirgen Schmidhuber. 1997.
Long short-term memory. Neural computation
9(8):1735-1780.

Rafal Jozefowicz, Wojciech Zaremba, and Ilya
Sutskever. 2015. An empirical exploration of recur-
rent network architectures. In Proceedings of ICML.
pages 2342-2350.

Nal Kalchbrenner, Edward Grefenstette, and Phil Blun-
som. 2014. A convolutional neural network for
modelling sentences. In Proceedings of ACL.


Quoc V Le and Tomas Mikolov. 2014. Distributed rep-
resentations of sentences and documents. In Pro-
ceedings of ICML. pages 1188-1196.

Yann LeCun, Léon Bottou, Yoshua Bengio, and Patrick
Haffner. 1998. Gradient-based learning applied to
document recognition. Proceedings of the IEEE
86(1 1):2278-2324.

Tomas Mikolovy, Ilya Sutskever, Kai Chen, Gregory S.
Corrado, and Jeffrey Dean. 2013. Distributed repre-
sentations of words and phrases and their composi-
tionality. In Proceedings of NIPS. pages 3111-3119.

Slav Petrov and Ryan McDonald. 2012. Overview of
the 2012 shared task on parsing the web. In Notes
of the First Workshop on Syntactic Analysis of Non-
Canonical Language (SANCL). volume 59.

Richard Socher, Alex Perelygin, Jean Y Wu, Jason
Chuang, Christopher D Manning, Andrew Y Ng,
and Christopher Potts. 2013. Recursive deep models
for semantic compositionality over a sentiment tree-
bank. In Proceedings EMNLP. volume 1631, page
1642.

Duyu Tang, Bing Qin, and Ting Liu. 2015. Document
modeling with gated recurrent neural network for
sentiment classification. In Proceedings of EMNLP.
pages 1422-1432.

Ngoc Thang Vu, Heike Adel, Pankaj Gupta, and Hin-
rich Schiitze. 2016. Combining recurrent and convo-
lutional neural networks for relation classification.
In Proceedings of NAACL HLT. pages 534-539.

Ying Wen, Weinan Zhang, Rui Luo, and Jun Wang.
2016. Learning text representation using recurrent
convolutional neural network with highway layers.
SIGIR Workshop on Neural Information Retrieval .

Kun Xu, Yansong Feng, Siva Reddy, Songfang Huang,
and Dongyan Zhao. 2016. Enhancing freebase
question answering using textual evidence. CoRR
abs/1603.00957.

Yi Yang, Wen-tau Yih, and Christopher Meek. 2015.
Wikiqa: A challenge dataset for open-domain ques-
tion answering. In Proceedings of EMNLP. pages
2013-2018.

Wen-tau Yih, Matthew Richardson, Chris Meek, Ming-
Wei Chang, and Jina Suh. 2016. The value of se-
mantic parse labeling for knowledge base question
answering. In Proceedings of ACL. pages 201-206.

Wenpeng Yin, Hinrich Schiitze, Bing Xiang, and
Bowen Zhou. 2016. ABCNN: attention-based con-
volutional neural network for modeling sentence
pairs. TACL 4:259-272.
