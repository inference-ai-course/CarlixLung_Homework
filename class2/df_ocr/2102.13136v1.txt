2102.13136v1 [cs.CL] 25 Feb 2021

1V

arX

Automated essay scoring using efficient transformer-based language
models

Christopher M. Ormerod, Akanksha Malhotra, and Amir Jafari

ABSTRACT. Automated Essay Scoring (AES) is a cross-disciplinary effort involving Education,
Linguistics, and Natural Language Processing (NLP). The efficacy of an NLP model in AES tests
it ability to evaluate long-term dependencies and extrapolate meaning even when text is poorly
written. Large pretrained transformer-based language models have dominated the current state-
of-the-art in many NLP tasks, however, the computational requirements of these models make
them expensive to deploy in practice. The goal of this paper is to challenge the paradigm in NLP
that bigger is better when it comes to AES. To do this, we evaluate the performance of several
fine-tuned pretrained NLP models with a modest number of parameters on an AES dataset. By
ensembling our models, we achieve excellent results with fewer parameters than most pretrained
transformer-based models.

1. Introduction

The idea that a computer could analyze writing style dates back to the work of Page in
1968 [31]. Many engines in production today rely on explicitly defined hand-crafted features
designed by experts to measure the intrinsic characteristics of writing [14]. These features are
combined with frequency-based methods and statistical models to form a collection of methods
that are broadly termed Bag-of-Word (BOW) methods [49]. While BOW methods have been
very successful from a purely statistical standpoint, showed they tend to be brittle with
respect novel uses of language and vulnerable to adversarially crafted inputs.

Neural Networks learn features implicitly rather than explicitly. It has been shown that ini-
tial neural network AES engines tend to be more more accurate and more robust to gaming
than BOW methods {15}. In the broader NLP community, the recurrent neural network
approaches used have been replaced by transformer-based approaches, like the Bidirectional En-
coder Representations from Transformers (BERT) [13]. These models tend to possess an order
of magnitude more parameters than recurrent neural networks, but also boast state-of-the-art re-
sults in the General Language Understanding Evaluation (GLUE) benchmarks [42}/45]. One of
the main problems in deploying these models is their computational and memory requirements
28]. This study explores the effectiveness of efficient versions of transformer-based models in
the domain of AES. There are two aspects of AES that distinguishes it from GLUE tasks that
might benefit from the efficiencies introduced in these models; firstly, the text being evaluated
can be almost arbitrarily long. Secondly, essays written by students often contain many more
spelling issues than would be present in typical GLUE tasks. It could be the case that fewer

1


2 CHRISTOPHER M. ORMEROD, AKANKSHA MALHOTRA, AND AMIR JAFARI

and more often updated parameters might possibly be better in this situation or more generally
where smaller training sets are used.

With respect to essay scoring the Automated Student Assessment Prize (ASAP) AES data-
set on Kaggle is a standard openly accessible data-set by which we may evaluate the performance
of a given AES model [35]. Since the original test set is no longer available, we use the five-fold
validation split presented in for a fair and accurate comparison. The accuracy of BERT and
XLNet have been shown to be very solid on the Kaggle dataset [47]. To our knowledge,
combining BERT with hand-crafted features form the current state-of-the-art [40].

The recent works of have challenged the paradigm that bigger models are necessarily better
(11) (21) (24) /29]. The models in these papers possess some fundamental architectural character-
istics that allow for a drastic reduction in model size, some of which may even be an advantage
in AES. For this study, we consider the performance of the Albert models [26], Reformer mod-
els [21], a version of the Electra model [11], and the Mobile-BERT model on the ASAP
AES data-set. Not only are each of these models more efficient, we show that simple ensembles
provide the best results to our knowledge on the ASAP AES dataset.

There are several reasons that this study is important. Firstly, the size of models scale
quadratically with maximum length allowed, meaning that essays may be longer than the max-
imal length allowed by most pretrained transformer-based models. By considering efficiencies
in underlying transformer architectures we can work on extending that maximum length. Sec-
ondly, as noted by [28], one of the barriers to effectively putting these models in production is
the memory and size constraints of having fine-tuned models for every essay prompt. Lastly, we
seek models that impose a smaller computational expense, which in turn has been linked by
to a much smaller carbon footprint.

2. Approaches to Automated Essay Scoring

From an assessment point of view, essay tests are useful in evaluating a student’s ability
to analyze and synthesize information, which assesses the upper levels of Blooms Taxonomy.
Many modern rubrics use a multitude of scoring dimensions to evaluate an essay, including
organization, elaboration, and writing style. An AES engine is a model that assigns scores to a
piece of text closely approximating the way a person would score the text as a final score or in
multiple dimensions.

To evaluate the performance of an engine we use standard inter-rater reliability statistics.
It has become standard practice in the development of a training set for an AES engine that
each essay is evaluated by two different raters from which we may obtain a resolved score. The
resolved score is usually either the same as the two raters in the case that they agree and an
adjudicated score in cases in which they do not. In the case of the ASAP AES data-set, the
resolved score for some items is taken to be the sum of the two raters, and a resolved score
for others. The goal of a good model is to have a higher agreement with the resolved score in
comparison with the agreement two raters have with each other. The most widely used statistic
used to evaluate the agreement of two different collections of scores is the quadratic weighted
kappa (QWK), defined by

_— Vd wri

1 _
° Wig Miz


AUTOMATED ESSAY SCORING USING EFFICIENT TRANSFORMER-BASED LANGUAGE MODELS 3

where 2;,; is the observed probability
mij = vig (1 — way),

and
C= i"
(k— 1)?’
where &; is the number of classes. The other measurements used in the industry are the standard-
ized mean difference (SMD) and the exact match or accuracy (Acc). The total number of essays
and the human-human agreement for the two raters and the score ranges are shown in table[I]

The usual protocol for training a statistical model is that some portion of the training set is
set aside for evaluation while the remaining set is used for training. A portion of the training
set is often isolated for purposes of early stopping and hyperparameter tuning. In evaluating the
Kaggle dataset, we use the 5-fold cross validation splits defined by so that our results are
comparable to other works {{1}[12} {33} {40} /47]. The resulting QWK is defined to be the average
of the QWK values on each of the five different splits.

wij = 1-

Tag Prompt
pa A 7 88
Rater score range 1-6 1-6 0-3 0-3 0-4 0-4

Resolved score | 2-12 1-6 0-3 0-3 0-4 0-4

range

Average Length 350 350 150 150 150 150
Training examples | 1783 | 1800 | 1726 | 1772 | 1805 | 1800

TABLE 1. Asummary of the Automated Student Assessment Prize Automated
Essay Scoring data-set.

3. Methodology

Most engines currently in production rely on Latent Semantic Analysis or a multitude of
hand-crafted features that measure style and prose. Once sufficiently many features are com-
piled, a traditional machine learning classifier, like logistic regression, is applied and fit to a
training corpus. As a representative of this class of model we include the results of the “En-
hanced AI Scoring Engine”, which is open source Kh

When modelling language with neural networks, the first layer of most neural networks are
embedding layers, which send every token to an element of a semantic vector space. When
training a neural network model from scratch, the word embedding vocabulary often comprises
of the set of tokens that appear in the training set. There are several problems with this ap-
proach that come as a result of word sparsity in language and the presence of spelling mistakes.
Alternatively, one may use a pretrained word embedding built from a large corpus with a
large vocabulary with a sufficiently high dimensional semantic vector space. From an efficiency

"https:// github.com/edx/ease


4 CHRISTOPHER M. ORMEROD, AKANKSHA MALHOTRA, AND AMIR JAFARI

standpoint, these word embeddings alone can account for billions of parameters. We can shrink
our embedding and address some issues arising from word sparsity by fixing a vocabulary of
subwords using a version of the byte-pair-encoding (BPE) [25}|34]. As such, pretrained models
like BERT and those we use in this study utilize subwords to fix the size of the vocabulary.

In addition to the word embeddings, positional embeddings and segment embedding are
used to give the model information about the position of each word and next sentences prediction.
The combination of the 3 embedding are the keys to reduce the vocabulary size, handling the out
of vocab, and preserving the order of words.

Once we have applied the embedding layer to the tokens of a piece of text, it is essentially a
sequence of elements of a vector space, which can be represented by a matrix whose dimensions
are governed by the size of the semantic vector space and the number of tokens in the text.

In the field of language modeling, sequence-to-sequence models (seq2seq) in the form of this
paper were proposed in [38]. Initially, seq2seq models were used for natural machine translation
between multiple languages. The seq2seq model has an encoder-decoder component; an encoder
analyzes the input sequence and creates a context vector while the decoder is initialized with the
context vector and is trainer to produce the transformed output. Previous language models were
based on a fixed-length context vector and suffered from an inability to infer context over long
sentences and text in general. An attention mechanism was used to improve the performance in
translation for long sentences.

The use of a self-attention mechanism turns out to be very useful in th context of machine
translation [3]. This mechanism, and it various derivatives, have been responsible for a large
number of accuracy gains over a wide range of NLP tasks more broadly. The form of attention
for this paper can be found in [41]. Given a query matrix Q, key matrix K,, and value matrix V,
then the resulting sequence is given by

(2) Attention(Q, K,V) = softmax (=) V.

’ ? Jd,
These matrices are obtained by linear transformations of either the output of a neural network,
the output of a previous attention mechanism, or embeddings. The overall success of atten-
tion has led to the development of the transformer [41]. The architecture of the transformer is
outlined in Figure[I]

In the context of efficient models, if we consider all sequences up to length L and if each
query is of size d, then each keys are also of length d, hence, the matrix Q.K7 of size L x L. The
implication is that the memory and computational power required to implement this mechanism
scales quadratically with length. The above-mentioned models often adhere to a size restriction
by letting L = 512.

4. Efficient Language Models

The transformer in language modeling is a innovative architecture to solve issues of seq2seq
tasks while handling long term dependencies. It relies on self-attention mechanisms in its net-
works architecture. Self attention is in charge of managing the interdependence within the input
elements.

In this study, we use five prominent models all of which are known to perform well as
language models and possess an order of magnitude fewer parameters than BERT. It should be
noted that many of the other models, like ROBERTa, XLNet, GPT models, T5, XLM, and even


AUTOMATED ESSAY SCORING USING EFFICIENT TRANSFORMER-BASED LANGUAGE MODELS 5

Add & Norm
Feed
Forward

Multi-head
Attention

Add & Norm
Masked
Multi-head
Attention

Embedding Embedding

FIGURE |. This is the basic architecture of a transformer-based model. The
left block of NV layers is called the encoder while the right block of N layers is
called the decoder. The output of the Decoder is a sequence.

Add & Norm

Feed
Forward

Add & Norm

Multi-head
Attention

Distilled BERT all possess more than 60M parameters, hence, were excluded for this study. We
only consider models utilizing an innovation that drastically reduces the number of parameters
to at most one quarter the number of parameters of BERT. Of this class of models, we present a
list of models and their respective sizes in Table [2]

The backbone architecture of all above language models is BERT [13]. It has become the
state-of-the-art model for many different Natural Language Undestanding (NLU), Natural Lan-
guage Generation (NLG) tasks including sequence and document classification.

The first models we consider are the Albert models of [26]. The first efficiency of Albert is
that the embedding matrix is factored. In the BERT model, the embedding size must be the same
as the hidden layer size. Since the vocabulary of the BERT model is approximately 30,000 and
the hidden layer size is 768 in the base model, the embedding alone requires approximately 25M
parameters to define. Not only does this significantly increase the size of the model, we expect
that some of those parameters to by updated rarely during the training process. By applying
a linear layer after the embedding, we effectively factor the embedding matrix in a way that
the actual embedding size can be much smaller than the feed forward layer. In the two models
(large and base), the size of the vocabulary is about the same however the embedding dimension
is effectively 128 making the embedding matrix one sixth the size.


6 CHRISTOPHER M. ORMEROD, AKANKSHA MALHOTRA, AND AMIR JAFARI

| Model || Number | Training | Inference || Training | Inference
of Time Time
Parameters | Speedup | Speedup

(BERT (bey) | tom | tox | 10x |
Albert (base)

Albert (large)
Electra (small)

Mobile BERT

Reformer . .

[ Blectra + Mobile BERT | 38M __[_1.5x_|_10x_|
TABLE 2. A summary of the memory and approximations of the computational
requirements of the models we use in the study when comparing to BERT. These
are estimates based on single epoch times using a fixed batch-size in training
and inference.

A second efficiency proposed by Albert is that the layers share parameters. compare a
multitude of parameter sharing scenarios in which all their parameters are shared across layers.
The base and large Albert models, with 12 layer and 24 layers respectively, only possess a total
of 12M and 18M parameters. The hidden size of of the base and large models are also 768 and
1024 respectively. Increasing the number of layers does increase the number of parameters but
does come with a computational cost. In the pretraining of the Albert models, the models are
trained with a sentence order prediction (SOP) loss function instead of next sentence prediction.
It is argued by that SOP can solve NSP tasks while the converse is not true and that this
distinction leads to consistent improvements in downstream tasks.

The second model we consider is the small version of Electra model presented by [11].
Like the Albert model, there is a linear layer between the embedding and the hidden layers,
allowing for a embedding size of 128, a hidden layer size of 256, and only four attention heads.
The pretraining of the Electra model is trained as a pair of neural networks consisting of a
generator and a discriminator with weight-sharing between the two networks. The generators
role is to replace tokens in a sequence, and is therefore trained as a masked language model. The
discriminator tries to identify that tokens were replaced by the generator in the sequence.

The third model, Mobile-BERT, was presented in [39]. This model uses the same embedding
factorization used to decouple the embedding size of 128 with the hidden size of 512. The main
innovation of is that they decrease the model size by introducing a pair of linear transfor-
mations, called bottlenecks, around the transformer unit so that the transformer unit is operating
on a hidden size of 128 instead of the full hidden size of of 512. This effectively shrinks the
size of the underlying building blocks. MobileBERT uses absolute position embeddings and it
is efficient at predicting masked tokens and at NLU.

The Reformer architecture of differs from BERT most substantially by its version of an
attention mechanism and that the feedforward component is of the attention layers use revsible
residual layers. This means that, like [18], the inputs of each layer can be computed on demand
instead of being stored. noted that they use an approximation of the (2) in which the linear
transformation used to define Q and K are the same, i.e., Q = K. When we calculate QK’,
more importantly, the softmax, we need only consider values in @ and kc that are close. Using


AUTOMATED ESSAY SCORING USING EFFICIENT TRANSFORMER-BASED LANGUAGE MODELS 7

random vectors, we may create a Locally Sensitive Hashing (LSH) scheme, allowing us to chunk
key/query vectors into finite collections of vectors that are known to contribute to the softmax.
Each chunk may be computed in parallel changing the complexity from scaling with length as
O(L?) to O(L log L). This is essentially a way to utilize the sparse nature of the attention matrix,
attempting to not calculate pairs of values not likely to contribute to the softmax. More hashes
improves the hashing scheme and better approximates the attention mechanism.

5. Results

The networks above are all pretrained to be seq2seq models. While some of the pretraining
differs for some models, as discussed above, we are required to modify a sequence-to-sequence
neural network to produce a classification. Typically, the way in which this is done is that
we take the first vector of the sequence as a finite set of features from which we may apply a
classification. Applying a linear layer to these features produces a fixed length vector that is
used for classification.

Se Oe

EASE

LSTM
LSTM+CNN
LSTM+CNN-+Att
BERT(base)
XLNet

BERT + XLNet
R?BERT

BERT + Features
Electra (small)
Albert (base)
Albert (large)
Mobile-BERT
Reformer

TABLE 3. The first set of agreement (QWK) statistics for each prompt. EASE,
LSTM, LSTM+CNN, and LSTM+CNN+Att, were presented by and [12].
The results of BERT, BERT extensions, and XLNET have been presented in
(33) {40} [47]. The remaining rows are the results of this paper.

Given a set of n possible scores, we divide the interval [0, 1] into n even sub-intervals and
map each score to the midpoint of those intervals. So in a similar manner to [46], we treat this
classification as a regression problem with a loss function of the mean squared error. This is
slightly different from the standard multilabel classification using a Cross-entropy loss function
often applied by default to transformer-based classification problems. Using the standard pre-
trained models with an untrained linear classification layer with a sigmoid activation function,
we applied a small grid-search using two learning rates and two batch sizes for each model. The
model performing the best on the test set was applied to validation.


8 CHRISTOPHER M. ORMEROD, AKANKSHA MALHOTRA, AND AMIR JAFARI

For the reformer model, we pretrained our own 6-layer reformer model using a hidden layer
size of 512, 4 hashing functions, and 4 attention heads. We used a cased sentencepiece tok-
enization consisting of 16,000 subwords and the model was trained with a maximum length of
1024 on a large corpus of essay texts from various grades on a single Nvidia RTX8000. This
model addresses the length constraints other essay models struggle with on transformer-based
architectures.

We see that both Electra and Mobile-BERT show performance higher than BERT itself
despite being smaller and faster. Given the extensive hyper-parameter tuning performed in [33],
we can only speculate that any additional gains may be due to architectural differences.

Lastly, we took our best models and simply averaged the outputs to obtain an ensembles
whose output is in the interval [0,1], then applied the same rounding transformation to obtain
scores in the desired range. We highlight the ensemble of Mobile-BERT and Electra because
on their own, this ensembled model provides a big increase in performance over BERT with
approximately the same computational footprint on its own.

6. Discussion

The goal of this paper was not to achieve state-of-the-art, but rather to show that we can
achieve significant results within a very modest memory footprint and computational budget.
We managed to exceed previous known results of BERT alone with approximately one third the
parameters. Combining these models with R? variants of or with features, as done in [40],
would be interesting since they do not add little to the computational load of the system.

There were noteworthy additions to the literature we did not consider for various reasons.
The Longformer of [4] uses a sliding attention window in which the resulting self-attention
mechanism scales linearly with length, however, the number of parameters of the pretrained
Longformer models often coincided or exceeded those of the BERT model. Like the Reformer
model of [21], the Linformer of [43], Sparse Transformer of [10], and Performer model of [9]
exploit the observation that the attention matrix (given by the softmax) can be approximated by
collection of low-rank matrices. Their different mechanisms for doing so means their complexity
scales differently. The Projection Attention Networks for Document Classification On-Device
(PRADO) model given by seems promising, however, we did not have access to a version
of it we could use. The SHARNN of also looks interesting, however, we found that the
architecture was difficult to use for transfer learning.

Transfer learning and language models improved the performance of document classification
texts in natural language processing domain. We should note that all these models are pertained
with a large corpus except for the Reformer model and we perform the fine-tuing process. Better
training could improve upon the results of the Reformer model.

There are several reasons these directions in research are important; as we are seeing more
and more attention given to power-efficient computing for usage on small-devices, we think the
deep learning community will see a greater emphasis on smaller efficient models in the future.
Secondly, this work provides a stepping stone to the classifying and evaluating documents where
the necessity for context to extend beyond the limits that current pretrained transformer-based
language models allow. Lastly we think combining the approaches that seem to have a beneficial
effect on performance should give smaller, better, and more environmentally friendly models in
the future.


AUTOMATED ESSAY SCORING USING EFFICIENT TRANSFORMER-BASED LANGUAGE MODELS 9

Acknowledgments

We would like to acknowledge Susan Lottridge and Balaji Kodeswaran for their support of
this project.

References

[1] Alikaniotis, Dimitrios, Helen Yannakoudakis, and Marek Rei. “Automatic text scoring using neural networks.”
arXiv preprint/arXiv:1606.04289)|(2016).

[2] Attali, Yigal, and Jill Burstein. “Automated essay scoring with e-rater® V. 2.” The Journal of Technology, Learn-
ing and Assessment 4, no. 3 (2006).

[3] Bahdanau, Dzmitry, Kyunghyun Cho, and Yoshua Bengio. “Neural machine translation by jointly learning to
align and translate.” arXiv preprintlarXxiv:1409.0473 (2014).

[4] Beltagy, Iz, Matthew E. Peters, and Arman Cohan. “Longformer: The long-document transformer.” arXiv
preprint |arXiv:2004.05150)(2020).

[5] Brown, Tom B., Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared Kaplan, Prafulla Dhariwal, Arvind Nee-
lakantan et al. “Language models are few-shot learners.” arXiv preprint|arXiv:2005.14165|(2020).

[6] Burstein, Jill, Karen Kukich, Susanne Wolff, Chi Lu, and Martin Chodorow. “Enriching automated essay scoring
using discourse marking.” (2001).

[7] Chen, Jing, James H. Fife, Isaac I. Bejar, and André A. Rupp. “Building e-rater® Scoring Models Using Machine
Learning Methods.” ETS Research Report Series 2016, no. 1 (2016): 1-12.

[8] Cho, Kyunghyun, Bart Van Merriénboer, Dzmitry Bahdanau, and Yoshua Bengio. “On the properties of neural
machine translation: Encoder-decoder approaches.” arXiv preprint|arXiv:1409.1259|(2014).

[9] Choromanski, Krzysztof, Valerii Likhosherstov, David Dohan, Xingyou Song, Andreea Gane, Tamas Sarlos,
Peter Hawkins et al. “Rethinking attention with performers.” arXiv preprint\arXiv:2009.14794| (2020).

[10] Child, Rewon, Scott Gray, Alec Radford, and Ilya Sutskever. “Generating long sequences with sparse transform-
ers.” arXiv preprint|arXiv:1904.10509|(2019).

[11] Clark, Kevin, Minh-Thang Luong, Quoc V. Le, and Christopher D. Manning. “Electra: Pre-training text en-
coders as discriminators rather than generators.” arXiv preprint|arXiv:2003.10555|(2020).

[12] Dong, Fei, Yue Zhang, and Jie Yang. “Attention-based recurrent convolutional neural network for automatic
essay scoring.” In Proceedings of the 21st Conference on Computational Natural Language Learning (CoNLL 2017),
pp. 153-162. 2017.

[13] Devlin, Jacob, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. “Bert: Pre-training of deep bidirectional
transformers for language understanding.” arXiv preprintlarXiv:1810.04805| (2018).

[14] Dikli, Semire. “An overview of automated scoring of essays.” The Journal of Technology, Learning and Assess-
ment 5, no. 1 (2006).

[15] Farag, Youmna, Helen Yannakoudakis, and Ted Briscoe. “Neural automated essay scoring and coherence mod-
eling for adversarially crafted input.” arXiv preprint/arXiv:1804.06898| (2018).

[16] Flor, Michael, Yoko Futagi, Melissa Lopez, and Matthew Mulholland. “Patterns of misspellings in L2 and L1
English: A view from the ETS Spelling Corpus.” Bergen Language and Linguistics Studies 6 (2015).

[17] Foltz, Peter W., Darrell Laham, and Thomas K. Landauer. “The intelligent essay assessor: Applications to
educational technology.” Interactive Multimedia Electronic Journal of Computer-Enhanced Learning 1, no. 2 (1999):
939-944,

[18] Gomez, Aidan N., Mengye Ren, Raquel Urtasun, and Roger B. Grosse. “The reversible residual network: Back-
propagation without storing activations.” In Advances in neural information processing systems, pp. 2214-2224.
2017.

[19] He, Kaiming, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. ’Deep residual learning for image recognition.” In
Proceedings of the IEEE conference on computer vision and pattern recognition, pp. 770-778. 2016.

[20] Hochreiter, Sepp, and Jiirgen Schmidhuber. “Long short-term memory.” Neural computation 9, no. 8 (1997):
1735-1780.

[21] Kitaev, Nikita, Lukasz Kaiser, and Anselm Levskaya. “Reformer: The efficient transformer.” arXiv preprint
arXiv:2001.04451|(2020)

[22] Kolowich, Steven. “Writing instructor, skeptical of automated grading, pits machine vs. machine.” The Chroni-
cle of Higher Education 28 (2014).


10 CHRISTOPHER M. ORMEROD, AKANKSHA MALHOTRA, AND AMIR JAFARI

[23] Krathwohl, David R. “A revision of Bloom’s taxonomy: An overview.” Theory into practice 41, no. 4 (2002):
212-218.

[24] Krishnamoorthi, Karthik, Sujith Ravi, and Zornitsa Kozareva. “PRADO: Projection Attention Networks for
Document Classification On-Device.” In Proceedings of the 2019 Conference on Empirical Methods in Natural Lan-
guage Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP),
pp. 5013-5024. 2019.

[25] Kudo, Taku, and John Richardson. “Sentencepiece: A simple and language independent subword tokenizer and
detokenizer for neural text processing.” arXiv preprintlarXiv:1808.06226)(2018).

[26] Lan, Zhenzhong, Mingda Chen, Sebastian Goodman, Kevin Gimpel, Piyush Sharma, and Radu Soricut. “Albert:
A lite bert for self-supervised learning of language representations.” arXiv preprint/arXiv:1909.11942)(2019).

[27] Luong, Minh-Thang, Hieu Pham, and Christopher D. Manning. “Effective approaches to attention-based neural
machine translation.” arXiv preprint/arXiv:1508.04025) (2015).

[28] Mayfield, Elijah, and Alan W. Black. “Should You Fine-Tune BERT for Automated Essay Scoring?.” In Pro-
ceedings of the Fifteenth Workshop on Innovative Use of NLP for Building Educational Applications, pp. 151-162.
2020.

[29] Merity, Stephen. “Single headed attention rnn: Stop thinking with your head.” arXiv preprint/arXiv:1911.11423)
(2019).

[30] Mikolov, Tomas, Ilya Sutskever, Kai Chen, Greg S. Corrado, and Jeff Dean. ’Distributed representations of
words and phrases and their compositionality.” In Advances in neural information processing systems, pp. 3111-
3119. 2013.

[31] Page, Ellis Batten, Gerald A. Fisher, and Mary Ann Fisher. “PROJECT ESSAY GRADE-A FORTRAN PRO-
GRAM FOR STATISTICAL ANALYSIS OF PROSE.” BRITISH JOURNAL OF MATHEMATICAL & STATIS-
TICAL PSYCHOLOGY 21 (1968): 139.

[32] Peters, Matthew E., Mark Neumann, Mohit Iyyer, Matt Gardner, Christopher Clark, Kenton Lee, and Luke
Zettlemoyer. “Deep contextualized word representations.” arXiv preprint/arXiv:1802.05365|(2018).

[33] Rodriguez, Pedro Uria, Amir Jafari, and Christopher M. Ormerod. “Language models and Automated Essay
Scoring.” arXiv preprint/arXiv:1909.09482) (2019).

[34] Sennrich, Rico, Barry Haddow, and Alexandra Birch. “Neural machine translation of rare words with subword
units.” arXiv preprint/arXiv:1508.07909](2015).

[35] Shermis, Mark D. “State-of-the-art automated essay scoring: Competition, results, and future directions from a
United States demonstration.” Assessing Writing 20 (2014): 53-76.

[36] Shermis, Mark D., and Jill C. Burstein, eds. “Automated essay scoring: A cross-disciplinary perspective.” Rout-
ledge, 2003.

[37] Strubell, Emma, Ananya Ganesh, and Andrew McCallum. “Energy and policy considerations for deep learning
in NLP.” arXiv preprint|arXiv:1906.02243](2019).

[38] Sutskever, Ilya, Oriol Vinyals, and Quoc V. Le. “Sequence to sequence learning with neural networks.” arXiv
preprint |arXiv:1409.3215|(2014).

[39] Sun, Zhiging, Hongkun Yu, Xiaodan Song, Renjie Liu, Yiming Yang, and Denny Zhou. “Mobilebert: a compact
task-agnostic bert for resource-limited devices.” arXiv preprint|arXiv:2004.02984 (2020).

[40] Uto, Masaki, Yikuan Xie, and Maomi Ueno. ”Neural Automated Essay Scoring Incorporating Handcrafted
Features.” In Proceedings of the 28th International Conference on Computational Linguistics, pp. 6077-6088. 2020.

[41] Vaswani, Ashish, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser,
and Illia Polosukhin. ”Attention is all you need.” In Advances in neural information processing systems, pp. 5998-
6008. 2017.

[42] Wang, Alex, Amanpreet Singh, Julian Michael, Felix Hill, Omer Levy, and Samuel R. Bowman. “Glue: A
multi-task benchmark and analysis platform for natural language understanding.” arXiv preprint\arXiv:1804.07461)
(2018).

[43] Wang, Sinong, Belinda Li, Madian Khabsa, Han Fang, and Hao Ma. “Linformer: Self-Attention with Linear
Complexity.” arXiv preprint/arXiv:2006.04768|(2020).

[44] Wang, Yequan, Minlie Huang, Xiaoyan Zhu, and Li Zhao. ”Attention-based LSTM for aspect-level sentiment
classification.” In Proceedings of the 2016 conference on empirical methods in natural language processing, pp.
606-615. 2016.


AUTOMATED ESSAY SCORING USING EFFICIENT TRANSFORMER-BASED LANGUAGE MODELS 11

[45] Wang, Alex, Yada Pruksachatkun, Nikita Nangia, Amanpreet Singh, Julian Michael, Felix Hill, Omer Levy,
and Samuel Bowman. “Superglue: A stickier benchmark for general-purpose language understanding systems.” In
Advances in Neural Information Processing Systems, pp. 3266-3280. 2019.

[46] Taghipour, Kaveh, and Hwee Tou Ng. “A neural approach to automated essay scoring.” In Proceedings of the
2016 conference on empirical methods in natural language processing, pp. 1882-1891. 2016.

[47] Yang, Ruosong, Jiannong Cao, Zhiyuan Wen, Youzheng Wu, and Xiaodong He. ”Enhancing Automated Essay
Scoring Performance via Cohesion Measurement and Combination of Regression and Ranking.” In Proceedings of
the 2020 Conference on Empirical Methods in Natural Language Processing: Findings, pp. 1560-1569. 2020.

[48] Yang, Zhilin, Zihang Dai, Yiming Yang, Jaime Carbonell, Russ R. Salakhutdinov, and Quoc V. Le. “XInet:
Generalized autoregressive pretraining for language understanding.” In Advances in neural information processing
systems, pp. 5753-5763. 2019.

[49] Zhang, Yin, Rong Jin, and Zhi-Hua Zhou. “Understanding bag-of-words model: a statistical framework.” Inter-
national Journal of Machine Learning and Cybernetics 1, no. 1-4 (2010): 43-52.

CAMBIUM ASSESSMENT, INC.
Current address: 1000 Thomas Jefferson St., N.W. Washington, D.C. 20007
Email address: christopher.ormerod@cambiumassessment.com

UNIVERSITY OF COLORADO, BOULDER
Email address: AKanksha.Malhotra@colorado.edu

CAMBIUM ASSESSMENT, INC.
Current address: 1000 Thomas Jefferson St., N.W. Washington, D.C. 20007
Email address: amir. jafari@cambiumassessment.com
